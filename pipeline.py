import subprocess
import sys
import time
import argparse
import logging
import os

# –õ–æ–≥–∏
os.makedirs('logs', exist_ok=True)
logging.basicConfig(
    filename='logs/pipeline.log',
    level=logging.INFO,
    format='[%(asctime)s] %(levelname)s ‚Äî %(message)s',
    handlers=[  # –î–æ–±–∞–≤–ª—è–µ–º –≤—ã–≤–æ–¥ –≤ –∫–æ–Ω—Å–æ–ª—å –¥–ª—è pipeline.log —Ç–æ–∂–µ
        logging.FileHandler('logs/pipeline.log', encoding='utf-8'),
        logging.StreamHandler(sys.stdout)
    ]
)
PYTHON_EXECUTABLE = sys.executable  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ—Ç –∂–µ –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ç–æ—Ä

# –¢–∞–π–º—Ñ—Ä–µ–π–º—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é, –µ—Å–ª–∏ –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω—ã —á–µ—Ä–µ–∑ –∞—Ä–≥—É–º–µ–Ω—Ç—ã
DEFAULT_TIMEFRAMES = ['1m', '5m', '15m', '30m', '1h', '4h', '1d']


def run_step(description, command_list):  # –ò–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ command_list
    print(f"\n[Pipeline] üîß  {description}...")
    logging.info(f"–°—Ç–∞—Ä—Ç —à–∞–≥–∞: {description}")
    logging.info(f"–ö–æ–º–∞–Ω–¥–∞: {' '.join(command_list)}")
    start_time = time.time()  # –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–æ –≤–æ –∏–∑–±–µ–∂–∞–Ω–∏–µ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–∞ —Å –º–æ–¥—É–ª–µ–º time

    # shell=False, –ø–µ—Ä–µ–¥–∞–µ–º –∫–æ–º–∞–Ω–¥—É –∫–∞–∫ —Å–ø–∏—Å–æ–∫
    result = subprocess.run(command_list, check=False)
    duration = time.time() - start_time

    if result.returncode == 0:
        logging.info(f"–ó–∞–≤–µ—Ä—à–µ–Ω–æ: {description} (‚è±  {duration:.1f}s)")
        print(f"[Pipeline] ‚úÖ  {description} ‚Äî –≤—ã–ø–æ–ª–Ω–µ–Ω–æ (‚è±  {duration:.1f}s)")
    elif result.returncode == 130:  # Ctrl+C –≤ –¥–æ—á–µ—Ä–Ω–µ–º –ø—Ä–æ—Ü–µ—Å—Å–µ
        logging.warning(f"–®–∞–≥ –ø—Ä–µ—Ä–≤–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º: {description} (‚è±  {duration:.1f}s)")
        print(f"[Pipeline] üî∂  –®–∞–≥ –ø—Ä–µ—Ä–≤–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º: {description} (‚è±  {duration:.1f}s)")
        sys.exit(130)  # –ü—Ä–µ—Ä—ã–≤–∞–µ–º –≤–µ—Å—å –ø–∞–π–ø–ª–∞–π–Ω
    else:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ —à–∞–≥–µ: {description} (–∫–æ–¥ {result.returncode})")
        print(f"[Pipeline] ‚ùå  –û—à–∏–±–∫–∞ –≤ —à–∞–≥–µ: {description} (–∫–æ–¥ {result.returncode}) (‚è±  {duration:.1f}s)")
        sys.exit(1)  # –ü—Ä–µ—Ä—ã–≤–∞–µ–º –≤–µ—Å—å –ø–∞–π–ø–ª–∞–π–Ω –ø—Ä–∏ –æ—à–∏–±–∫–µ


def parse_args():
    parser = argparse.ArgumentParser(description="Pipeline –¥–ª—è –∫—Ä–∏–ø—Ç–æ-–ø—Ä–æ–≥–Ω–æ–∑–∞")
    parser.add_argument('--tf', nargs='*', default=DEFAULT_TIMEFRAMES,
                        help=f"–¢–∞–π–º—Ñ—Ä–µ–π–º—ã –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä: --tf 5m 15m). –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é: {' '.join(DEFAULT_TIMEFRAMES)}")
    parser.add_argument('--train', action='store_true', help='–í–∫–ª—é—á–∏—Ç—å –æ–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–µ–π (CatBoost)')
    parser.add_argument('--skip-predict', action='store_true', help='–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –ø—Ä–æ–≥–Ω–æ–∑')
    parser.add_argument('--full-update', action='store_true',
                        help='–í–º–µ—Å—Ç–æ mini –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–ø—É—Å–∫–∞—Ç—å old_update_binance_data.py --all')
    return parser.parse_args()


def main():
    args = parse_args()
    timeframes_to_process = args.tf

    print(f"[Pipeline] üöÄ –ó–∞–ø—É—Å–∫ –ø–∞–π–ø–ª–∞–π–Ω–∞ –¥–ª—è —Ç–∞–π–º—Ñ—Ä–µ–π–º–æ–≤: {', '.join(timeframes_to_process)}")
    if args.full_update:
        print("[Pipeline] –í—ã–±—Ä–∞–Ω —Ä–µ–∂–∏–º –ø–æ–ª–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö.")
    if args.train:
        print("[Pipeline] –û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–µ–π –≤–∫–ª—é—á–µ–Ω–æ.")
    if args.skip_predict:
        print("[Pipeline] –§–∏–Ω–∞–ª—å–Ω—ã–π –ø—Ä–æ–≥–Ω–æ–∑ –±—É–¥–µ—Ç –ø—Ä–æ–ø—É—â–µ–Ω.")

    if args.full_update:
        # –î–ª—è old_update_binance_data.py –ø–µ—Ä–µ–¥–∞–µ–º --all, –µ—Å–ª–∏ —Ö–æ—Ç–∏–º –æ–±–Ω–æ–≤–∏—Ç—å –≤—Å–µ –¢–§ –∏–∑ –µ–≥–æ —Å–ø–∏—Å–∫–∞
        # –∏–ª–∏ –º–æ–∂–Ω–æ –ø–µ—Ä–µ–¥–∞—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ --tf, –µ—Å–ª–∏ old_update_binance_data.py —ç—Ç–æ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –¥–ª—è --all
        # –í —Ç–µ–∫—É—â–µ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ old_update_binance_data.py --all –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Å–µ —Å–≤–æ–∏ TIMEFRAMES
        run_step("üì¶  –ü–æ–ª–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö (old_update --all)",
                 [PYTHON_EXECUTABLE, "old_update_binance_data.py", "--all"])
    else:
        # mini_update_binance_data.py –ø—Ä–∏–Ω–∏–º–∞–µ—Ç --tf —Å–æ —Å–ø–∏—Å–∫–æ–º
        run_step(f"üì•  –ò–Ω–∫—Ä–µ–º–µ–Ω—Ç–∞–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–≤–µ—á–µ–π –¥–ª—è {', '.join(timeframes_to_process)}",
                 [PYTHON_EXECUTABLE, "mini_update_binance_data.py", "--tf"] + timeframes_to_process)

    # –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –∏ –æ–±—É—á–µ–Ω–∏–µ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞
    for tf_item in timeframes_to_process:
        run_step(f"‚öôÔ∏è  [{tf_item}] –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤",
                 [PYTHON_EXECUTABLE, "preprocess_features.py", "--tf", tf_item])
        if args.train:
            run_step(f"üß†  [{tf_item}] –û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–µ–π (CatBoost)",
                     [PYTHON_EXECUTABLE, "train_model.py", "--tf", tf_item])

    if not args.skip_predict:
        run_step("üîÆ  –§–∏–Ω–∞–ª—å–Ω—ã–π –ø—Ä–æ–≥–Ω–æ–∑ (predict_all --save)",
                 [PYTHON_EXECUTABLE, "predict_all.py", "--save"])

    print("[Pipeline] üéâ –ü–∞–π–ø–ª–∞–π–Ω –∑–∞–≤–µ—Ä—à–µ–Ω.")


if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        print("\n[Pipeline] üõë –ü–∞–π–ø–ª–∞–π–Ω –ø—Ä–µ—Ä–≤–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º (Ctrl+C).")
        sys.exit(130)
    except SystemExit as e:  # –ü–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–µ–º sys.exit –∏–∑ run_step
        if e.code == 130:
            print("\n[Pipeline] üõë –ü–∞–π–ø–ª–∞–π–Ω –ø—Ä–µ—Ä–≤–∞–Ω –∏–∑-–∑–∞ Ctrl+C –≤ –¥–æ—á–µ—Ä–Ω–µ–º –ø—Ä–æ—Ü–µ—Å—Å–µ.")
        elif e.code == 1:
            print("\n[Pipeline] üõë –ü–∞–π–ø–ª–∞–π–Ω –ø—Ä–µ—Ä–≤–∞–Ω –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏ –≤ –¥–æ—á–µ—Ä–Ω–µ–º –ø—Ä–æ—Ü–µ—Å—Å–µ.")
        sys.exit(e.code)
    except Exception as e:
        logging.error(f"[Pipeline] üí• –ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –≤ –ø–∞–π–ø–ª–∞–π–Ω–µ: {e}", exc_info=True)
        print(f"\n[Pipeline] üí• –ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –≤ –ø–∞–π–ø–ª–∞–π–Ω–µ: {e}")
        sys.exit(1)