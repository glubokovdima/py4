import subprocess
import sys
import time
import argparse
import logging
import os

# –õ–æ–≥–∏
os.makedirs('logs', exist_ok=True)
logging.basicConfig(
    filename='logs/pipeline.log',
    level=logging.INFO,
    format='[%(asctime)s] %(levelname)s ‚Äî %(message)s',
    handlers=[
        logging.FileHandler('logs/pipeline.log', encoding='utf-8'),
        logging.StreamHandler(sys.stdout)
    ]
)
PYTHON_EXECUTABLE = sys.executable

DEFAULT_TIMEFRAMES = ['1m', '5m', '15m', '30m', '1h', '4h', '1d']


def run_step(description, command_list):
    print(f"\n[Pipeline] üîß  {description}...")
    logging.info(f"–°—Ç–∞—Ä—Ç —à–∞–≥–∞: {description}")
    logging.info(f"–ö–æ–º–∞–Ω–¥–∞: {' '.join(command_list)}")
    start_time = time.time()

    result = subprocess.run(command_list, check=False)
    duration = time.time() - start_time

    if result.returncode == 0:
        logging.info(f"–ó–∞–≤–µ—Ä—à–µ–Ω–æ: {description} (‚è±  {duration:.1f}s)")
        print(f"[Pipeline] ‚úÖ  {description} ‚Äî –≤—ã–ø–æ–ª–Ω–µ–Ω–æ (‚è±  {duration:.1f}s)")
    elif result.returncode == 130:
        logging.warning(f"–®–∞–≥ –ø—Ä–µ—Ä–≤–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º: {description} (‚è±  {duration:.1f}s)")
        print(f"[Pipeline] üî∂  –®–∞–≥ –ø—Ä–µ—Ä–≤–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º: {description} (‚è±  {duration:.1f}s)")
        sys.exit(130)
    else:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ —à–∞–≥–µ: {description} (–∫–æ–¥ {result.returncode})")
        print(f"[Pipeline] ‚ùå  –û—à–∏–±–∫–∞ –≤ —à–∞–≥–µ: {description} (–∫–æ–¥ {result.returncode}) (‚è±  {duration:.1f}s)")
        sys.exit(1)


def parse_args():
    parser = argparse.ArgumentParser(description="Pipeline –¥–ª—è –∫—Ä–∏–ø—Ç–æ-–ø—Ä–æ–≥–Ω–æ–∑–∞")
    parser.add_argument('--tf', nargs='*', default=DEFAULT_TIMEFRAMES,
                        help=f"–¢–∞–π–º—Ñ—Ä–µ–π–º—ã –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä: --tf 5m 15m). –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é: {' '.join(DEFAULT_TIMEFRAMES)}")
    parser.add_argument('--train', action='store_true', help='–í–∫–ª—é—á–∏—Ç—å –æ–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–µ–π (CatBoost)')
    parser.add_argument('--skip-predict', action='store_true', help='–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –ø—Ä–æ–≥–Ω–æ–∑')
    parser.add_argument('--full-update', action='store_true',
                        help='–í–º–µ—Å—Ç–æ mini –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–ø—É—Å–∫–∞—Ç—å old_update_binance_data.py --all')
    
    # --- –ù–û–í–´–ï –ê–†–ì–£–ú–ï–ù–¢–´ ---
    parser.add_argument('--symbol', type=str, default=None,
                        help="–û–¥–∏–Ω —Å–∏–º–≤–æ–ª –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä: BTCUSDT). –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω, --symbol-group –∏–≥–Ω–æ—Ä–∏—Ä—É–µ—Ç—Å—è.")
    parser.add_argument('--symbol-group', type=str, default=None,
                        help="–ì—Ä—É–ø–ø–∞ —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä: top8, meme).")
    # -----------------------
    return parser.parse_args()


def main():
    args = parse_args()
    timeframes_to_process = args.tf

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—É—Ñ—Ñ–∏–∫—Å –¥–ª—è –æ–ø–∏—Å–∞–Ω–∏—è –∏ –ª–æ–≥–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ symbol/symbol-group
    processing_target_desc = ""
    if args.symbol:
        processing_target_desc = f" –¥–ª—è —Å–∏–º–≤–æ–ª–∞ {args.symbol.upper()}"
    elif args.symbol_group:
        processing_target_desc = f" –¥–ª—è –≥—Ä—É–ø–ø—ã {args.symbol_group.lower()}"
    else:
        processing_target_desc = " (–≤—Å–µ —Å–∏–º–≤–æ–ª—ã/–≥—Ä—É–ø–ø—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)"


    print(f"[Pipeline] üöÄ –ó–∞–ø—É—Å–∫ –ø–∞–π–ø–ª–∞–π–Ω–∞ –¥–ª—è —Ç–∞–π–º—Ñ—Ä–µ–π–º–æ–≤: {', '.join(timeframes_to_process)}{processing_target_desc}")
    if args.full_update:
        print("[Pipeline] –í—ã–±—Ä–∞–Ω —Ä–µ–∂–∏–º –ø–æ–ª–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö.")
    if args.train:
        print("[Pipeline] –û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–µ–π –≤–∫–ª—é—á–µ–Ω–æ.")
    if args.skip_predict:
        print("[Pipeline] –§–∏–Ω–∞–ª—å–Ω—ã–π –ø—Ä–æ–≥–Ω–æ–∑ –±—É–¥–µ—Ç –ø—Ä–æ–ø—É—â–µ–Ω.")

    # --- –®–∞–≥ 1: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö ---
    # –°–∫—Ä–∏–ø—Ç—ã –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö (old_update, mini_update) –ø–æ–∫–∞ –Ω–µ –ø—Ä–∏–Ω–∏–º–∞—é—Ç --symbol/--symbol-group.
    # –ï—Å–ª–∏ –æ–Ω–∏ –±—É–¥—É—Ç –º–æ–¥–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω—ã, –∑–¥–µ—Å—å –º–æ–∂–Ω–æ –±—É–¥–µ—Ç –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å —ç—Ç–∏ –∞—Ä–≥—É–º–µ–Ω—Ç—ã.
    if args.full_update:
        run_step("üì¶  –ü–æ–ª–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö (old_update --all)",
                 [PYTHON_EXECUTABLE, "old_update_binance_data.py", "--all"])
    else:
        run_step(f"üì•  –ò–Ω–∫—Ä–µ–º–µ–Ω—Ç–∞–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–≤–µ—á–µ–π –¥–ª—è {', '.join(timeframes_to_process)}",
                 [PYTHON_EXECUTABLE, "mini_update_binance_data.py", "--tf"] + timeframes_to_process)

    # --- –®–∞–≥–∏ 2 –∏ 3: –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –∏ –û–±—É—á–µ–Ω–∏–µ (–¥–ª—è –∫–∞–∂–¥–æ–≥–æ –¢–§) ---
    for tf_item in timeframes_to_process:
        # --- –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ ---
        preprocess_cmd = [PYTHON_EXECUTABLE, "preprocess_features.py", "--tf", tf_item]
        if args.symbol: # –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω --symbol, –æ–Ω –∏–º–µ–µ—Ç –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
            preprocess_cmd.extend(["--symbol", args.symbol.upper()])
        elif args.symbol_group: # –ò–Ω–∞—á–µ, –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω–∞ --symbol-group
            preprocess_cmd.extend(["--symbol-group", args.symbol_group.lower()])
        # –ï—Å–ª–∏ –Ω–∏ --symbol, –Ω–∏ --symbol-group –Ω–µ —É–∫–∞–∑–∞–Ω—ã, preprocess_features.py –æ–±—Ä–∞–±–æ—Ç–∞–µ—Ç –≤—Å–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        
        desc_preprocess = f"‚öôÔ∏è  [{tf_item}{processing_target_desc}] –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤"
        run_step(desc_preprocess, preprocess_cmd)

        # --- –û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–µ–π ---
        if args.train:
            train_cmd = [PYTHON_EXECUTABLE, "train_model.py", "--tf", tf_item]
            # train_model.py –¢–†–ï–ë–£–ï–¢ –ª–∏–±–æ --symbol, –ª–∏–±–æ --symbol-group
            if args.symbol:
                train_cmd.extend(["--symbol", args.symbol.upper()])
            elif args.symbol_group:
                train_cmd.extend(["--symbol-group", args.symbol_group.lower()])
            else:
                # –ï—Å–ª–∏ –Ω–∏ —Å–∏–º–≤–æ–ª, –Ω–∏ –≥—Ä—É–ø–ø–∞ –Ω–µ —É–∫–∞–∑–∞–Ω—ã –¥–ª—è –ø–∞–π–ø–ª–∞–π–Ω–∞,
                # train_model.py –º–æ–∂–µ—Ç –≤—ã–¥–∞—Ç—å –æ—à–∏–±–∫—É –∏–ª–∏ –∏–º–µ—Ç—å —Å–≤–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é (–Ω–∞–ø—Ä–∏–º–µ—Ä, –æ–±—É—á–∏—Ç—å "–æ–±—â—É—é" –º–æ–¥–µ–ª—å).
                # –î–ª—è —è–≤–Ω–æ—Å—Ç–∏, –µ—Å–ª–∏ –º—ã —Ö–æ—Ç–∏–º –æ–±—É—á–∞—Ç—å "–æ–±—â—É—é" –º–æ–¥–µ–ª—å, train_model.py –¥–æ–ª–∂–µ–Ω —ç—Ç–æ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å
                # –±–µ–∑ --symbol/--symbol-group –∏–ª–∏ —Å –∫–∞–∫–∏–º-—Ç–æ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–º —Ñ–ª–∞–≥–æ–º.
                # –í —Ç–µ–∫—É—â–µ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ train_model.py (–∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –æ—Ç–≤–µ—Ç–∞) –æ–∂–∏–¥–∞–µ—Ç –æ–¥–∏–Ω –∏–∑ —ç—Ç–∏—Ö —Ñ–ª–∞–≥–æ–≤.
                # –ï—Å–ª–∏ –º—ã —Ö–æ—Ç–∏–º, —á—Ç–æ–±—ã –ø–∞–π–ø–ª–∞–π–Ω –±–µ–∑ —ç—Ç–∏—Ö —Ñ–ª–∞–≥–æ–≤ –æ–±—É—á–∞–ª "–æ–±—â—É—é" –º–æ–¥–µ–ª—å,
                # —Ç–æ train_model.py –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∏–∑–º–µ–Ω–µ–Ω, —á—Ç–æ–±—ã —ç—Ç–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Å—É—Ñ—Ñ–∏–∫—Å "all").
                # –ü–æ–∫–∞ —á—Ç–æ, –µ—Å–ª–∏ —ç—Ç–∏ —Ñ–ª–∞–≥–∏ –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω—ã –≤ –ø–∞–π–ø–ª–∞–π–Ω, train_model.py –Ω–µ –±—É–¥–µ—Ç –≤—ã–∑–≤–∞–Ω —Å –Ω–∏–º–∏.
                # –≠—Ç–æ –º–æ–∂–µ—Ç –ø—Ä–∏–≤–µ—Å—Ç–∏ –∫ –æ—à–∏–±–∫–µ –≤ train_model.py, –µ—Å–ª–∏ –æ–Ω –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –Ω–∞ —Ä–∞–±–æ—Ç—É –±–µ–∑ —ç—Ç–∏—Ö —Ñ–ª–∞–≥–æ–≤.
                #
                # –†–ï–®–ï–ù–ò–ï: train_model.py –¥–æ–ª–∂–µ–Ω —É–º–µ—Ç—å —Ä–∞–±–æ—Ç–∞—Ç—å –±–µ–∑ --symbol/--symbol-group,
                # –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—è —ç—Ç–æ –∫–∞–∫ –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ–±—É—á–µ–Ω–∏–µ "–æ–±—â–µ–π" –º–æ–¥–µ–ª–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –∏—Å–ø–æ–ª—å–∑—É—è —Å—É—Ñ—Ñ–∏–∫—Å "all").
                # –ï—Å–ª–∏ train_model.py —Å—Ç—Ä–æ–≥–æ —Ç—Ä–µ–±—É–µ—Ç –æ–¥–∏–Ω –∏–∑ —Ñ–ª–∞–≥–æ–≤, —Ç–æ –ø–∞–π–ø–ª–∞–π–Ω –¥–æ–ª–∂–µ–Ω –ª–∏–±–æ
                # —Ç—Ä–µ–±–æ–≤–∞—Ç—å –∏—Ö, –ª–∏–±–æ –∏–º–µ—Ç—å –ª–æ–≥–∏–∫—É –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é (–Ω–∞–ø—Ä–∏–º–µ—Ä, –Ω–µ –æ–±—É—á–∞—Ç—å, –µ—Å–ª–∏ –æ–Ω–∏ –Ω–µ –∑–∞–¥–∞–Ω—ã).
                #
                # –î–ª—è –¥–∞–Ω–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–µ–¥–ø–æ–ª–æ–∂–∏–º, —á—Ç–æ –µ—Å–ª–∏ –Ω–∏ --symbol, –Ω–∏ --symbol-group –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω—ã –≤ –ø–∞–π–ø–ª–∞–π–Ω,
                # —Ç–æ train_model.py –±—É–¥–µ—Ç –≤—ã–∑–≤–∞–Ω –±–µ–∑ —ç—Ç–∏—Ö —Ñ–ª–∞–≥–æ–≤, –∏ –æ–Ω –¥–æ–ª–∂–µ–Ω —Å–∞–º —Ä–µ—à–∏—Ç—å, –∫–∞–∫ —ç—Ç–æ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å
                # (–Ω–∞–ø—Ä–∏–º–µ—Ä, –æ–±—É—á–∏—Ç—å –º–æ–¥–µ–ª—å –¥–ª—è "all").
                # –ï—Å–ª–∏ train_model.py –Ω–µ –º–æ–∂–µ—Ç —Ç–∞–∫ —Ä–∞–±–æ—Ç–∞—Ç—å, —Ç–æ –Ω—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –æ—à–∏–±–∫—É –∑–¥–µ—Å—å –∏–ª–∏
                # —Å–¥–µ–ª–∞—Ç—å --symbol –∏–ª–∏ --symbol-group –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–º–∏ –¥–ª—è –ø–∞–π–ø–ª–∞–π–Ω–∞, –µ—Å–ª–∏ --train –∞–∫—Ç–∏–≤–µ–Ω.
                #
                # –î–∞–≤–∞–π—Ç–µ —Å–¥–µ–ª–∞–µ–º —Ç–∞–∫: –µ—Å–ª–∏ –Ω–∏ —Å–∏–º–≤–æ–ª, –Ω–∏ –≥—Ä—É–ø–ø–∞ –Ω–µ —É–∫–∞–∑–∞–Ω—ã, –º—ã –ù–ï –ø–µ—Ä–µ–¥–∞–µ–º —ç—Ç–∏ —Ñ–ª–∞–≥–∏ –≤ train_model.
                # train_model.py –∏–∑ –≤–∞—à–µ–≥–æ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ —É–∂–µ —É–º–µ–µ—Ç —ç—Ç–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å,
                # —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—è symbols_to_process = [None] (—Ç.–µ. –æ–±—â–∞—è –º–æ–¥–µ–ª—å)
                # –∏ –∏—Å–ø–æ–ª—å–∑—É—è files_suffix = tf_train (–Ω–∞–ø—Ä–∏–º–µ—Ä, "1h_clf_long.pkl")
                #
                # –û–ë–ù–û–í–õ–ï–ù–ò–ï: train_model.py –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –æ—Ç–≤–µ—Ç–∞ —Ç—Ä–µ–±—É–µ—Ç –ª–∏–±–æ --symbol, –ª–∏–±–æ --symbol-group.
                # –ó–Ω–∞—á–∏—Ç, –µ—Å–ª–∏ –æ–Ω–∏ –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω—ã –≤ –ø–∞–π–ø–ª–∞–π–Ω, –∏ args.train –∞–∫—Ç–∏–≤–µ–Ω, –Ω—É–∂–Ω–æ –≤—ã–¥–∞—Ç—å –æ—à–∏–±–∫—É –∏–ª–∏ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å –æ–±—É—á–µ–Ω–∏–µ.
                # –î–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã, –µ—Å–ª–∏ –æ–Ω–∏ –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω—ã, –º—ã –Ω–µ –±—É–¥–µ–º –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å —ç—Ç–∏ —Ñ–ª–∞–≥–∏,
                # –∏ train_model.py –≤—ã–¥–∞—Å—Ç –æ—à–∏–±–∫—É, —á—Ç–æ –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç –ø–∞–π–ø–ª–∞–π–Ω. –≠—Ç–æ —è–≤–Ω–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ.
                # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ, –º–æ–∂–Ω–æ –Ω–µ –≤—ã–∑—ã–≤–∞—Ç—å –æ–±—É—á–µ–Ω–∏–µ, –µ—Å–ª–∏ —Ñ–ª–∞–≥–∏ –Ω–µ –∑–∞–¥–∞–Ω—ã:
                if not args.symbol and not args.symbol_group:
                    logging.warning(f"–û–±—É—á–µ–Ω–∏–µ –¥–ª—è {tf_item} –ø—Ä–æ–ø—É—â–µ–Ω–æ: –Ω–µ —É–∫–∞–∑–∞–Ω --symbol –∏–ª–∏ --symbol-group –¥–ª—è –ø–∞–π–ø–ª–∞–π–Ω–∞.")
                    print(f"[Pipeline] ‚ö†Ô∏è  –û–±—É—á–µ–Ω–∏–µ –¥–ª—è {tf_item} –ø—Ä–æ–ø—É—â–µ–Ω–æ: –Ω–µ —É–∫–∞–∑–∞–Ω --symbol –∏–ª–∏ --symbol-group.")
                    # continue # –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å —ç—Ç–æ—Ç –¢–§ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è, –µ—Å–ª–∏ —ç—Ç–æ –∂–µ–ª–∞—Ç–µ–ª—å–Ω–æ
                else: # –¢–æ–ª—å–∫–æ –µ—Å–ª–∏ —Å–∏–º–≤–æ–ª –∏–ª–∏ –≥—Ä—É–ø–ø–∞ —É–∫–∞–∑–∞–Ω—ã, –≤—ã–∑—ã–≤–∞–µ–º –æ–±—É—á–µ–Ω–∏–µ
                    desc_train = f"üß†  [{tf_item}{processing_target_desc}] –û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–µ–π (CatBoost)"
                    run_step(desc_train, train_cmd)

    # --- –®–∞–≥ 4: –§–∏–Ω–∞–ª—å–Ω—ã–π –ø—Ä–æ–≥–Ω–æ–∑ ---
    if not args.skip_predict:
        predict_cmd = [PYTHON_EXECUTABLE, "predict_all.py", "--save"]
        if args.symbol:
            predict_cmd.extend(["--symbol", args.symbol.upper()])
        elif args.symbol_group:
            predict_cmd.extend(["--symbol-group", args.symbol_group.lower()])
        # –ï—Å–ª–∏ –Ω–∏ --symbol, –Ω–∏ --symbol-group –Ω–µ —É–∫–∞–∑–∞–Ω—ã, predict_all.py –æ–±—Ä–∞–±–æ—Ç–∞–µ—Ç –≤—Å–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é.
        
        desc_predict = f"üîÆ  –§–∏–Ω–∞–ª—å–Ω—ã–π –ø—Ä–æ–≥–Ω–æ–∑{processing_target_desc}"
        run_step(desc_predict, predict_cmd)

    print("[Pipeline] üéâ –ü–∞–π–ø–ª–∞–π–Ω –∑–∞–≤–µ—Ä—à–µ–Ω.")


if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        print("\n[Pipeline] üõë –ü–∞–π–ø–ª–∞–π–Ω –ø—Ä–µ—Ä–≤–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º (Ctrl+C).")
        sys.exit(130)
    except SystemExit as e:
        if e.code == 130:
            print("\n[Pipeline] üõë –ü–∞–π–ø–ª–∞–π–Ω –ø—Ä–µ—Ä–≤–∞–Ω –∏–∑-–∑–∞ Ctrl+C –≤ –¥–æ—á–µ—Ä–Ω–µ–º –ø—Ä–æ—Ü–µ—Å—Å–µ.")
        elif e.code == 1:
            print("\n[Pipeline] üõë –ü–∞–π–ø–ª–∞–π–Ω –ø—Ä–µ—Ä–≤–∞–Ω –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏ –≤ –¥–æ—á–µ—Ä–Ω–µ–º –ø—Ä–æ—Ü–µ—Å—Å–µ.")
        sys.exit(e.code) # –ü–µ—Ä–µ–¥–∞–µ–º –∫–æ–¥ –≤—ã—Ö–æ–¥–∞ –¥–∞–ª—å—à–µ
    except Exception as e:
        logging.error(f"[Pipeline] üí• –ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –≤ –ø–∞–π–ø–ª–∞–π–Ω–µ: {e}", exc_info=True)
        print(f"\n[Pipeline] üí• –ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –≤ –ø–∞–π–ø–ª–∞–π–Ω–µ: {e}")
        sys.exit(1)