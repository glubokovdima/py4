# scripts/cli.py

import subprocess
import sys
import os
import shutil
import argparse
import logging

# Ensure the src directory is in the Python path (usually handled by running from project root)
# sys.path.append(os.path.abspath(os.path.join(os.path.dirname(__file__), '../src')))

# Import config and logging setup first
from src.utils.config import get_config
from src.utils.logging_setup import setup_logging

# --- Initial Setup ---
# Load configuration
config = get_config()
PATHS_CONFIG = config['paths']
TIMEFRAMES_CONFIG = config['timeframes']
SYMBOL_GROUPS = config['symbol_groups']

# Configure logging for this script (this will set up handlers based on logging.yaml)
setup_logging()
logger = logging.getLogger(__name__) # Use logger specific to this module (scripts.cli)

# --- Constants from Config ---
CORE_TIMEFRAMES_LIST = TIMEFRAMES_CONFIG['default']
# Collect all known group names
KNOWN_SYMBOL_GROUPS = list(SYMBOL_GROUPS.keys())
# Add 'all' as a special key for --symbol-group in scripts if needed
# KNOWN_SYMBOL_GROUPS_WITH_ALL = KNOWN_SYMBOL_GROUPS + ['all'] # Decide if 'all' is a group or separate flag


# --- Helper Functions ---

def print_header(title):
    """Prints a formatted header to the console."""
    print("\n" + "=" * 60)
    print(f" {title.center(58)} ")
    print("=" * 60)

def run_script(script_name, command_args, description):
    """
    Runs a script as a subprocess.

    Args:
        script_name (str): The name of the script in the 'scripts' directory (e.g., 'update_data.py').
        command_args (list): List of arguments to pass to the script.
        description (str): A human-readable description of the step.

    Returns:
        int: The return code of the subprocess.
    """
    script_path = os.path.join(os.path.dirname(__file__), script_name)
    command_list = [sys.executable, script_path] + command_args

    print(f"\n‚è≥  –ó–∞–ø—É—Å–∫ —à–∞–≥–∞: {description}...")
    logger.info(f"Running step: {description}")
    logger.info(f"Command: {' '.join(command_list)}")

    try:
        # subprocess.run directs stdout/stderr to the parent process by default
        result = subprocess.run(command_list, check=False) # check=False allows us to handle return code

        if result.returncode == 0:
            print(f"‚úÖ  –£—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ: {description}")
            logger.info(f"Step '{description}' completed successfully.")
        elif result.returncode == 130: # Standard Unix exit code for Ctrl+C
            print(f"üî∂  –ü—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º: {description}")
            logger.warning(f"Step '{description}' interrupted by user (code 130).")
        else:
            print(f"‚ùå  –û—à–∏–±–∫–∞ (–∫–æ–¥ {result.returncode}): {description}")
            logger.error(f"Step '{description}' failed with return code {result.returncode}.")

        return result.returncode

    except FileNotFoundError:
        print(f"‚ùå  –û—à–∏–±–∫–∞: –°–∫—Ä–∏–ø—Ç '{script_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –æ–Ω —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ '{os.path.dirname(script_path)}' –∏ Python –¥–æ—Å—Ç—É–ø–µ–Ω.")
        logger.error(f"Script '{script_name}' not found at '{script_path}'.")
        return -1 # Custom error code for script not found
    except Exception as e:
        print(f"‚ùå  –ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ '{description}': {e}")
        logger.error(f"Unexpected error running step '{description}': {e}", exc_info=True)
        return -2 # Custom error code for other exceptions


def select_timeframes_interactive(prompt_message="–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞–π–º—Ñ—Ä–µ–π–º—ã"):
    """Interactively prompts user to select timeframes."""
    print_header(prompt_message)
    print("–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–∞–π–º—Ñ—Ä–µ–π–º—ã:", ", ".join(CORE_TIMEFRAMES_LIST))
    print("–í–≤–µ–¥–∏—Ç–µ —Ç–∞–π–º—Ñ—Ä–µ–π–º—ã —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª (–Ω–∞–ø—Ä–∏–º–µ—Ä, 15m 1h),")
    print("'all' –¥–ª—è –≤—Å–µ—Ö, –∏–ª–∏ 'q' –¥–ª—è –æ—Ç–º–µ–Ω—ã.")
    while True:
        selected_tfs_str = input(f"> ").strip()
        if selected_tfs_str.lower() == 'q':
            logger.info("Timeframe selection cancelled by user.")
            return None
        if not selected_tfs_str or selected_tfs_str.lower() == 'all':
            logger.info(f"Selected all timeframes: {CORE_TIMEFRAMES_LIST}")
            return CORE_TIMEFRAMES_LIST

        selected_tfs = []
        invalid_tfs = []
        for tf_input in selected_tfs_str.split():
            if tf_input in CORE_TIMEFRAMES_LIST:
                selected_tfs.append(tf_input)
            else:
                invalid_tfs.append(tf_input)

        if invalid_tfs:
            print(f"–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ —Ç–∞–π–º—Ñ—Ä–µ–π–º—ã ({', '.join(invalid_tfs)}) –±—É–¥—É—Ç –ø—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω—ã.")
            logger.warning(f"Invalid timeframes entered: {invalid_tfs}. Ignoring.")

        if not selected_tfs:
            print("–ù–µ –≤—ã–±—Ä–∞–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
            logger.warning("No valid timeframes selected.")
            continue
        # Sort selected TF for predictable order
        selected_tfs.sort(key=lambda x: CORE_TIMEFRAMES_LIST.index(x))
        print(f"–í—ã–±—Ä–∞–Ω—ã —Ç–∞–π–º—Ñ—Ä–µ–π–º—ã: {', '.join(selected_tfs)}")
        logger.info(f"Selected timeframes: {selected_tfs}")
        return selected_tfs


def select_symbol_filter_interactive(prompt_message="–í—ã–±–µ—Ä–∏—Ç–µ —Å–∏–º–≤–æ–ª, –≥—Ä—É–ø–ø—É –∏–ª–∏ –≤—Å–µ"):
    """Interactively prompts user to select a symbol, group, or all symbols."""
    print_header(prompt_message)
    print(f"–î–æ—Å—Ç—É–ø–Ω—ã–µ –≥—Ä—É–ø–ø—ã: {', '.join(KNOWN_SYMBOL_GROUPS)}")
    print("–í–≤–µ–¥–∏—Ç–µ —Å–∏–º–≤–æ–ª (–Ω–∞–ø—Ä–∏–º–µ—Ä: BTCUSDT),")
    print("–∏–º—è –≥—Ä—É–ø–ø—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä: top8),")
    print("'all' –¥–ª—è –≤—Å–µ—Ö —Å–∏–º–≤–æ–ª–æ–≤, –∏–ª–∏ 'q' –¥–ª—è –æ—Ç–º–µ–Ω—ã.")
    # Note: --symbol-list is not offered in the interactive menu for simplicity.

    while True:
        filter_str = input(f"> ").strip()
        if filter_str.lower() == 'q':
            logger.info("Symbol filter selection cancelled by user.")
            return None, None # Return None for both symbol and group args
        if not filter_str or filter_str.lower() == 'all':
            logger.info("Selected 'all' symbols.")
            return None, None # Return None for both args, indicating 'all'
        if filter_str.lower() in KNOWN_SYMBOL_GROUPS:
            group_name = filter_str.lower()
            print(f"–í—ã–±—Ä–∞–Ω–∞ –≥—Ä—É–ø–ø–∞: {group_name}")
            logger.info(f"Selected symbol group: {group_name}")
            return None, ["--symbol-group", group_name] # Return group args
        # Assume it's a symbol if not a group or 'all'
        symbol_name = filter_str.upper() # Symbols are typically uppercase
        # Basic check if it looks like a symbol (e.g., contains USDT) - optional but can prevent typos
        # if 'USDT' not in symbol_name and len(symbol_name) < 4: # Very basic check
        #      print(f"'{filter_str}' –Ω–µ –ø–æ—Ö–æ–∂–µ –Ω–∞ —Å–∏–º–≤–æ–ª –∏–ª–∏ –∏–∑–≤–µ—Å—Ç–Ω—É—é –≥—Ä—É–ø–ø—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        #      continue
        print(f"–í—ã–±—Ä–∞–Ω —Å–∏–º–≤–æ–ª: {symbol_name}")
        logger.info(f"Selected symbol: {symbol_name}")
        return ["--symbol", symbol_name], None # Return symbol args


def clear_training_artifacts_interactive():
    """Interactively prompts user to confirm and clears training artifacts."""
    print_header("–û—á–∏—Å—Ç–∫–∞ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤ –æ–±—É—á–µ–Ω–∏—è")
    models_dir = PATHS_CONFIG['models_dir']
    logs_dir = PATHS_CONFIG['logs_dir']
    data_dir = PATHS_CONFIG['data_dir'] # Features and sample files are here

    print("\n–í–ù–ò–ú–ê–ù–ò–ï! –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ —É–¥–∞–ª–∏—Ç:")
    print(f"  - –í—Å–µ —Ñ–∞–π–ª—ã –∏–∑ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ '{models_dir}/'")
    print(f"  - –í—Å–µ —Ñ–∞–π–ª—ã –∏–∑ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ '{logs_dir}/' (–∫—Ä–æ–º–µ update_log.txt)")
    print(f"  - –§–∞–π–ª—ã 'features_*.pkl' –∏ 'sample_*.csv' –∏–∑ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ '{data_dir}/'")
    print(f"\n–ü–∞–ø–∫–∞ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö '{PATHS_CONFIG['db']}' –∏ —Ñ–∞–π–ª '{os.path.join(data_dir, 'update_log.txt')}' –ù–ï –±—É–¥—É—Ç –∑–∞—Ç—Ä–æ–Ω—É—Ç—ã.")

    confirm = input("–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å? (y/n): ").lower().strip()

    if confirm == 'y':
        print("\nüßπ  –ù–∞—á–∏–Ω–∞–µ–º –æ—á–∏—Å—Ç–∫—É...")
        logger.info("Starting cleanup of training artifacts.")

        # Clear Models Directory
        if os.path.exists(models_dir):
            try:
                # Use shutil.rmtree and then recreate the directory
                shutil.rmtree(models_dir)
                logger.info(f"Directory '{models_dir}' removed.")
            except Exception as e:
                print(f"    –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –º–æ–¥–µ–ª–µ–π '{models_dir}': {e}")
                logger.error(f"Failed to remove models directory '{models_dir}': {e}")
            os.makedirs(models_dir, exist_ok=True) # Recreate the directory
            print(f"    –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –º–æ–¥–µ–ª–µ–π '{models_dir}' –æ—á–∏—â–µ–Ω–∞.")
        else:
            print(f"    –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –º–æ–¥–µ–ª–µ–π '{models_dir}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ (–ø—Ä–æ–ø—É—â–µ–Ω–æ).")
            os.makedirs(models_dir, exist_ok=True) # Ensure it exists anyway

        # Clear Logs Directory (keeping update_log.txt)
        if os.path.exists(logs_dir):
            try:
                update_log_path = os.path.join(data_dir, "update_log.txt") # update_log is in data/
                # List all items first, then remove
                items_to_remove = [os.path.join(logs_dir, item) for item in os.listdir(logs_dir)]
                removed_count = 0
                for item_path in items_to_remove:
                    try:
                        if os.path.isfile(item_path):
                            os.remove(item_path)
                            removed_count += 1
                        elif os.path.isdir(item_path):
                            shutil.rmtree(item_path)
                            removed_count += 1 # Count the directory removal
                    except Exception as e:
                         print(f"    –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å '{item_path}': {e}")
                         logger.error(f"Failed to remove '{item_path}' during logs cleanup: {e}")

                print(f"    –°–æ–¥–µ—Ä–∂–∏–º–æ–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –ª–æ–≥–æ–≤ '{logs_dir}' –æ—á–∏—â–µ–Ω–æ (—É–¥–∞–ª–µ–Ω–æ {removed_count} —ç–ª–µ–º–µ–Ω—Ç–æ–≤).")
                logger.info(f"Contents of '{logs_dir}' cleared ({removed_count} items removed).")

            except Exception as e:
                 print(f"    –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—Å–∫–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –ª–æ–≥–æ–≤ '{logs_dir}': {e}")
                 logger.error(f"Failed to list contents of '{logs_dir}' during cleanup: {e}")
        else:
            print(f"    –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –ª–æ–≥–æ–≤ '{logs_dir}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ (–ø—Ä–æ–ø—É—â–µ–Ω–æ).")
        # Ensure logs directory exists after cleanup attempt
        os.makedirs(logs_dir, exist_ok=True)


        # Clear Features/Sample files from Data Directory
        if os.path.exists(data_dir):
            cleaned_feature_files_count = 0
            try:
                items_to_scan = [os.path.join(data_dir, item) for item in os.listdir(data_dir)]
                for item_path in items_to_scan:
                    if os.path.isfile(item_path):
                        item_name = os.path.basename(item_path)
                        # Check for features_*.pkl and sample_*.csv patterns
                        if (item_name.startswith("features_") and item_name.endswith(".pkl")) or \
                           (item_name.startswith("sample_") and item_name.endswith(".csv")):
                            try:
                                os.remove(item_path)
                                # logger.debug(f"Removed feature/sample file: {item_path}") # Too verbose
                                cleaned_feature_files_count += 1
                            except Exception as e:
                                print(f"    –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Ñ–∞–π–ª '{item_path}': {e}")
                                logger.error(f"Failed to remove feature/sample file '{item_path}': {e}")
            except Exception as e:
                 print(f"    –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–∞–Ω–Ω—ã—Ö '{data_dir}': {e}")
                 logger.error(f"Error scanning '{data_dir}' for feature/sample files: {e}")

            if cleaned_feature_files_count > 0:
                print(f"    –£–¥–∞–ª–µ–Ω–æ {cleaned_feature_files_count} —Ñ–∞–π–ª–æ–≤ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤/—Å—ç–º–ø–ª–æ–≤ –∏–∑ '{data_dir}'.")
                logger.info(f"Removed {cleaned_feature_files_count} feature/sample files from '{data_dir}'.")
            else:
                print(f"    –§–∞–π–ª—ã –ø—Ä–∏–∑–Ω–∞–∫–æ–≤/—Å—ç–º–ø–ª–æ–≤ –≤ '{data_dir}' –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –∏–ª–∏ —É–∂–µ –æ—á–∏—â–µ–Ω—ã.")
                logger.info("No feature/sample files found for cleanup.")

        else:
            print(f"    –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–∞–Ω–Ω—ã—Ö '{data_dir}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –ø—Ä–æ–ø—É—Å–∫ —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤/—Å—ç–º–ø–ª–æ–≤.")
            logger.warning(f"Data directory '{data_dir}' not found, skipping feature/sample cleanup.")

        print("‚úÖ  –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")
        logger.info("Cleanup process finished.")
    else:
        print("–û—á–∏—Å—Ç–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.")
        logger.info("Cleanup cancelled by user.")


def ensure_base_directories():
    """Ensures necessary base directories exist."""
    print("–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ —Å–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑–æ–≤—ã—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π...")
    logger.info("Checking and creating base directories.")
    # DB directory path is from the config, extract directory name
    db_dir = os.path.dirname(PATHS_CONFIG['db'])
    dirs_to_check = [db_dir, PATHS_CONFIG['data_dir'], PATHS_CONFIG['models_dir'], PATHS_CONFIG['logs_dir']]
    for dir_path in dirs_to_check:
        # Ensure dir_path is not empty or current dir if db path is just a filename
        if dir_path and not os.path.exists(dir_path):
            try:
                os.makedirs(dir_path)
                print(f"  –°–æ–∑–¥–∞–Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {dir_path}")
                logger.info(f"Created directory: {dir_path}")
            except Exception as e:
                 print(f"  ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ {dir_path}: {e}")
                 logger.error(f"Failed to create directory {dir_path}: {e}")
        # else: logger.debug(f"Directory exists: {dir_path}") # Too verbose

    print("–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")
    logger.info("Base directory check finished.")


# --- Main Menu ---
def main_menu():
    """Displays the main interactive menu and handles user input."""
    ensure_base_directories()

    while True:
        print_header("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
        print("--- üì¶ –°–±–æ—Ä –∏ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –î–∞–Ω–Ω—ã—Ö ---")
        print("  1. –ü–æ–ª–Ω–∞—è (–≥–ª—É–±–æ–∫–∞—è) –∑–∞–≥—Ä—É–∑–∫–∞ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö (update_data --full)")
        print("  2. –ò–Ω–∫—Ä–µ–º–µ–Ω—Ç–∞–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–≤–µ–∂–∏—Ö –¥–∞–Ω–Ω—ã—Ö (update_data --mini)")
        print("--- ‚öôÔ∏è  –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏ –û–±—É—á–µ–Ω–∏–µ –ú–æ–¥–µ–ª–µ–π ---")
        print("  3. –ü–æ—Å—Ç—Ä–æ–∏—Ç—å –ø—Ä–∏–∑–Ω–∞–∫–∏ (preprocess)")
        print("  4. –û–±—É—á–∏—Ç—å –º–æ–¥–µ–ª–∏ (train)")
        print("--- üöÄ –ü–∞–π–ø–ª–∞–π–Ω—ã (–ö–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏) ---")
        print("  5. –ü–∞–π–ø–ª–∞–π–Ω: –ú–∏–Ω–∏-–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ -> –ü—Ä–∏–∑–Ω–∞–∫–∏ -> –û–±—É—á–µ–Ω–∏–µ (pipeline --mini --train)")
        print("  6. –ü–∞–π–ø–ª–∞–π–Ω: –ü–æ–ª–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ -> –ü—Ä–∏–∑–Ω–∞–∫–∏ -> –û–±—É—á–µ–Ω–∏–µ (pipeline --full --train)")
        print("  7. –ü–û–õ–ù–´–ô –ü–ï–†–ï–°–ë–û–†: –û—á–∏—Å—Ç–∫–∞ -> –ü–æ–ª–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ -> –ü—Ä–∏–∑–Ω–∞–∫–∏ -> –û–±—É—á–µ–Ω–∏–µ")
        print("--- üìä –ü—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –ê–Ω–∞–ª–∏–∑ ---")
        print("  8. –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–≥–Ω–æ–∑—ã –∏ —Ç–æ—Ä–≥–æ–≤—ã–π –ø–ª–∞–Ω (predict)")
        print("  9. –ó–∞–ø—É—Å—Ç–∏—Ç—å –±—ç–∫—Ç–µ—Å—Ç –¥–ª—è –æ–¥–Ω–æ–≥–æ —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞ (predict_backtest) [WIP]") # Mark as Work In Progress
        print("--- üõ†Ô∏è  –£—Ç–∏–ª–∏—Ç—ã ---")
        print(" 10. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å GPU –¥–ª—è CatBoost (gpu_test) [WIP]") # Mark as Work In Progress
        print(" 11. –û–ß–ò–°–¢–ò–¢–¨ –≤—Å–µ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç—ã –æ–±—É—á–µ–Ω–∏—è (–º–æ–¥–µ–ª–∏, –ª–æ–≥–∏, features)")
        print("  0. –í—ã—Ö–æ–¥")
        print("-" * 60)

        choice = input("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –æ–ø—Ü–∏–∏: ").strip()
        logger.info(f"User selected menu option: {choice}")

        try:
            if choice == '1':
                tfs = select_timeframes_interactive("–¢–∞–π–º—Ñ—Ä–µ–π–º—ã –¥–ª—è –ø–æ–ª–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏")
                if tfs is not None:
                     run_script("update_data.py", ["--full", "--tf"] + tfs, "–ü–æ–ª–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö")

            elif choice == '2':
                tfs = select_timeframes_interactive("–¢–∞–π–º—Ñ—Ä–µ–π–º—ã –¥–ª—è –∏–Ω–∫—Ä–µ–º–µ–Ω—Ç–∞–ª—å–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è")
                if tfs is not None:
                     run_script("update_data.py", ["--mini", "--tf"] + tfs, "–ò–Ω–∫—Ä–µ–º–µ–Ω—Ç–∞–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–≤–µ–∂–∏—Ö –¥–∞–Ω–Ω—ã—Ö")

            elif choice == '3':
                tfs = select_timeframes_interactive("–¢–∞–π–º—Ñ—Ä–µ–π–º—ã –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –ø—Ä–∏–∑–Ω–∞–∫–æ–≤")
                if tfs is not None:
                    # Prompt for symbol/group filter
                    symbol_args, group_args = select_symbol_filter_interactive("–°–∏–º–≤–æ–ª/–ì—Ä—É–ø–ø–∞ –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –ø—Ä–∏–∑–Ω–∞–∫–æ–≤")
                    if symbol_args is not None or group_args is not None: # User didn't cancel filter selection
                         filter_args = symbol_args or group_args or [] # Use empty list if 'all' was selected
                         for tf_item in tfs:
                             desc = f"–ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –¥–ª—è {tf_item}" + ("" if not filter_args else f" ({filter_args[1]})")
                             if run_script("preprocess.py", ["--tf", tf_item] + filter_args, desc) != 0:
                                 print(f"–®–∞–≥ '{desc}' –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–æ–π. –ü—Ä–µ—Ä—ã–≤–∞–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Ç–∞–π–º—Ñ—Ä–µ–π–º–æ–≤.")
                                 logger.error(f"Preprocessing failed for {tf_item} with filter {filter_args}. Aborting further TF processing.")
                                 break # Stop processing remaining TFs on error

            elif choice == '4':
                tfs = select_timeframes_interactive("–¢–∞–π–º—Ñ—Ä–µ–π–º—ã –¥–ª—è –æ–±—É—á–µ–Ω–∏—è –º–æ–¥–µ–ª–µ–π")
                if tfs is not None:
                    # Prompt for symbol/group filter
                    # Train script requires --symbol or --symbol-group (or --symbol-group all)
                    print("–í—ã–±–µ—Ä–∏—Ç–µ —Å–∏–º–≤–æ–ª –∏–ª–∏ –≥—Ä—É–ø–ø—É –¥–ª—è –æ–±—É—á–µ–Ω–∏—è.")
                    print(f"  (–û—Å—Ç–∞–≤—å—Ç–µ –ø—É—Å—Ç—ã–º –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ 'all' –¥–ª—è –æ–±—É—á–µ–Ω–∏—è –º–æ–¥–µ–ª–µ–π –¥–ª—è –≤—Å–µ—Ö —Å–∏–º–≤–æ–ª–æ–≤)")
                    symbol_args, group_args = select_symbol_filter_interactive(prompt_message="–°–∏–º–≤–æ–ª/–ì—Ä—É–ø–ø–∞ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è")

                    # Determine the training key/args to pass to train.py
                    train_filter_args = []
                    if symbol_args:
                        train_filter_args = symbol_args # Pass --symbol <SYMBOL>
                        train_key_desc = symbol_args[1]
                    elif group_args:
                        train_filter_args = group_args # Pass --symbol-group <GROUP>
                        train_key_desc = group_args[1]
                        if train_key_desc.lower() not in KNOWN_SYMBOL_GROUPS and train_key_desc.lower() != 'all':
                             print(f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –≥—Ä—É–ø–ø–∞ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è: {train_key_desc}. –û—Ç–º–µ–Ω–∞.")
                             logger.error(f"Unknown group specified for training: {train_key_desc}. Cancelled.")
                             continue # Back to main menu
                    else: # User selected 'all' or left empty
                         train_filter_args = ["--symbol-group", "all"] # Use the standard key for 'all'
                         train_key_desc = "all"

                    for tf_item in tfs:
                         desc = f"–û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–µ–π –¥–ª—è {tf_item} ({train_key_desc})"
                         if run_script("train.py", ["--tf", tf_item] + train_filter_args, desc) != 0:
                            print(f"–®–∞–≥ '{desc}' –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–æ–π. –ü—Ä–µ—Ä—ã–≤–∞–Ω–∏–µ –æ–±—É—á–µ–Ω–∏—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Ç–∞–π–º—Ñ—Ä–µ–π–º–æ–≤.")
                            logger.error(f"Training failed for {tf_item} with filter {train_filter_args}. Aborting further TF training.")
                            break # Stop processing remaining TFs on error

            elif choice == '5':
                tfs = select_timeframes_interactive("–¢–∞–π–º—Ñ—Ä–µ–π–º—ã –¥–ª—è –ø–∞–π–ø–ª–∞–π–Ω–∞ (–ú–∏–Ω–∏-–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ -> –ü—Ä–∏–∑–Ω–∞–∫–∏ -> –û–±—É—á–µ–Ω–∏–µ)")
                if tfs is not None:
                    # Prompt for symbol/group filter for preprocess/train steps in pipeline
                    symbol_args, group_args = select_symbol_filter_interactive("–°–∏–º–≤–æ–ª/–ì—Ä—É–ø–ø–∞ –¥–ª—è —à–∞–≥–æ–≤ –ü—Ä–∏–∑–Ω–∞–∫–∏/–û–±—É—á–µ–Ω–∏–µ –≤ –ø–∞–π–ø–ª–∞–π–Ω–µ")
                    if symbol_args is not None or group_args is not None: # User didn't cancel filter selection
                        filter_args = symbol_args or group_args or [] # Use empty list if 'all' selected
                        filter_desc = "" if not filter_args else f" ({filter_args[1]})"
                        run_script("pipeline.py", ["--mini-update", "--train", "--tf"] + tfs + filter_args,
                                   f"–ü–∞–π–ø–ª–∞–π–Ω (–º–∏–Ω–∏-–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ, –ø—Ä–∏–∑–Ω–∞–∫–∏, –æ–±—É—á–µ–Ω–∏–µ{filter_desc})")

            elif choice == '6':
                tfs = select_timeframes_interactive("–¢–∞–π–º—Ñ—Ä–µ–π–º—ã –¥–ª—è –ø–∞–π–ø–ª–∞–π–Ω–∞ (–ü–æ–ª–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ -> –ü—Ä–∏–∑–Ω–∞–∫–∏ -> –û–±—É—á–µ–Ω–∏–µ)")
                if tfs is not None:
                    # Prompt for symbol/group filter for preprocess/train steps in pipeline
                    symbol_args, group_args = select_symbol_filter_interactive("–°–∏–º–≤–æ–ª/–ì—Ä—É–ø–ø–∞ –¥–ª—è —à–∞–≥–æ–≤ –ü—Ä–∏–∑–Ω–∞–∫–∏/–û–±—É—á–µ–Ω–∏–µ –≤ –ø–∞–π–ø–ª–∞–π–Ω–µ")
                    if symbol_args is not None or group_args is not None: # User didn't cancel filter selection
                        filter_args = symbol_args or group_args or [] # Use empty list if 'all' selected
                        filter_desc = "" if not filter_args else f" ({filter_args[1]})"
                        run_script("pipeline.py", ["--full-update", "--train", "--tf"] + tfs + filter_args,
                                   f"–ü–∞–π–ø–ª–∞–π–Ω (–ø–æ–ª–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ, –ø—Ä–∏–∑–Ω–∞–∫–∏, –æ–±—É—á–µ–Ω–∏–µ{filter_desc})")

            elif choice == '7':
                tfs = select_timeframes_interactive(
                    "–¢–∞–π–º—Ñ—Ä–µ–π–º—ã –¥–ª—è –ü–û–õ–ù–û–ì–û –ü–ï–†–ï–°–ë–û–†–ê (–û—á–∏—Å—Ç–∫–∞ -> –ü–æ–ª–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ -> –ü—Ä–∏–∑–Ω–∞–∫–∏ -> –û–±—É—á–µ–Ω–∏–µ)")
                if tfs is not None:
                     print_header("–ù–∞—á–∞–ª–æ –ü–û–õ–ù–û–ì–û –ü–ï–†–ï–°–ë–û–†–ê")
                     logger.info("Starting FULL REBUILD pipeline.")
                     # Clear artifacts first
                     clear_training_artifacts_interactive()
                     # Run the pipeline with full update and training
                     # Full rebuild typically applies to ALL symbols, so no filter args here.
                     # If you wanted to rebuild *only* for a specific group/symbol, you'd add filter_args here.
                     # Let's assume full rebuild means for 'all' features/models.
                     if run_script("pipeline.py", ["--full-update", "--train", "--tf"] + tfs,
                                   "–≠—Ç–∞–ø 1/1 (–ü–æ–ª–Ω—ã–π –ø–µ—Ä–µ—Å–±–æ—Ä): –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ, –ü—Ä–∏–∑–Ω–∞–∫–∏, –û–±—É—á–µ–Ω–∏–µ –¥–ª—è –≤—Å–µ—Ö —Å–∏–º–≤–æ–ª–æ–≤") == 0:
                         print_header("–ü–û–õ–ù–´–ô –ü–ï–†–ï–°–ë–û–† –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ.")
                         logger.info("FULL REBUILD pipeline finished successfully.")
                     else:
                          print_header("–ü–û–õ–ù–´–ô –ü–ï–†–ï–°–ë–û–† –ø—Ä–µ—Ä–≤–∞–Ω –Ω–∞ –æ–¥–Ω–æ–º –∏–∑ —ç—Ç–∞–ø–æ–≤.")
                          logger.error("FULL REBUILD pipeline aborted due to error.")


            elif choice == '8':
                # Generate Predictions
                tfs = select_timeframes_interactive("–¢–∞–π–º—Ñ—Ä–µ–π–º—ã –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–æ–≥–Ω–æ–∑–æ–≤")
                if tfs is not None:
                    # Prompt for symbol/group filter
                    symbol_args, group_args = select_symbol_filter_interactive("–°–∏–º–≤–æ–ª/–ì—Ä—É–ø–ø–∞ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–æ–≥–Ω–æ–∑–æ–≤")
                    if symbol_args is not None or group_args is not None: # User didn't cancel filter selection
                        filter_args = symbol_args or group_args or [] # Use empty list if 'all' selected
                        filter_desc = "" if not filter_args else f" ({filter_args[1]})"
                        # Add --save flag to save predictions by default from this menu option
                        run_script("predict.py", ["--tf"] + tfs + filter_args + ["--save"],
                                   f"–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–æ–≥–Ω–æ–∑–æ–≤{filter_desc}")


            elif choice == '9':
                print("\n[WIP] –ë—ç–∫—Ç–µ—Å—Ç (predict_backtest) –µ—â–µ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω –≤ –Ω–æ–≤–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–µ.")
                logger.info("Backtest option selected (WIP).")
                # TODO: Implement backtest script and call it here

            elif choice == '10':
                print("\n[WIP] –ü—Ä–æ–≤–µ—Ä–∫–∞ GPU (gpu_test) –µ—â–µ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞ –≤ –Ω–æ–≤–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–µ.")
                logger.info("GPU Test option selected (WIP).")
                # TODO: Implement gpu_test script and call it here

            elif choice == '11':
                clear_training_artifacts_interactive()

            elif choice == '0':
                print("–í—ã—Ö–æ–¥ –∏–∑ –ø—Ä–æ–≥—Ä–∞–º–º—ã.")
                logger.info("Exiting program.")
                sys.exit(0)

            else:
                print("–ù–µ–≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä –æ–ø—Ü–∏–∏ –∏–∑ –º–µ–Ω—é.")
                logger.warning(f"Invalid menu input: {choice}")

        except KeyboardInterrupt:
            print("\n–û–ø–µ—Ä–∞—Ü–∏—è –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º (Ctrl+C). –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.")
            logger.warning("Operation interrupted by user (Ctrl+C). Returning to main menu.")
            # subprocess.run should handle Ctrl+C and return 130, which run_step logs.
            # The outer loop catches it if Ctrl+C is pressed while in the menu prompt.
            continue # Go back to the menu loop
        except Exception as e:
            print(f"\n–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ main_cli: {e}")
            logger.critical(f"Critical error in main_cli menu loop: {e}", exc_info=True)
            # Decide whether to exit or return to menu on critical error
            # For now, return to menu is safer unless it's a SystemExit from subprocess
            continue # Go back to the menu loop

# --- Main Execution Block ---

if __name__ == "__main__":
    # This is the absolute entry point when running `python scripts/cli.py`
    # Set the current working directory to the project root
    # This ensures paths like ./config/, ./data/, etc. work correctly regardless
    # of where the script is executed from.
    project_root = os.path.abspath(os.path.join(os.path.dirname(__file__), '..'))
    os.chdir(project_root)
    # logger.info(f"Changed current working directory to: {os.getcwd()}") # Logger might not be fully set up yet

    # Now, set up logging using the config files
    # This should happen only once at the very beginning of the main entry point
    setup_logging()
    logger = logging.getLogger(__name__) # Re-get logger after setup

    logger.info("CLI started.")

    try:
        main_menu()
    except KeyboardInterrupt:
        print("\n–ü—Ä–æ–≥—Ä–∞–º–º–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º (Ctrl+C).")
        logger.info("Program terminated by user (Ctrl+C).")
        sys.exit(0)
    except SystemExit as e: # Catch sys.exit calls from run_step or validation errors
        if e.code != 0:
             logger.error(f"CLI exited with code {e.code}.")
        sys.exit(e.code)
    except Exception as e:
        print(f"\n–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤–Ω–µ –º–µ–Ω—é: {e}")
        logger.critical(f"Critical error outside menu loop: {e}", exc_info=True)
        sys.exit(1)