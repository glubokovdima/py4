# scripts/predict.py

import argparse
import sys
import os
import logging

# Ensure the src directory is in the Python path if necessary (usually handled by running from project root)
# sys.path.append(os.path.abspath(os.path.join(os.path.dirname(__file__), '../src')))

# Import config and logging setup first
from src.utils.config import get_config
from src.utils.logging_setup import setup_logging

# Import the prediction functions from the models module
from src.models.predict import generate_predictions, save_predictions_and_plan, print_predictions_to_console

# --- Initial Setup ---
# Load configuration
config = get_config()
SYMBOL_GROUPS = config['symbol_groups'] # Need symbol groups for validation
TIMEFRAMES_CONFIG = config['timeframes'] # Need default timeframes

# Configure logging for this script
setup_logging()
logger = logging.getLogger(__name__) # Use logger specific to this module

# --- Command Line Interface ---

if __name__ == '__main__':
    parser = argparse.ArgumentParser(description="–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–æ–≥–Ω–æ–∑–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ–±—É—á–µ–Ω–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π.")
    parser.add_argument('--tf', nargs='+', help=f"–£–∫–∞–∂–∏ —Ç–∞–π–º—Ñ—Ä–µ–π–º—ã –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 15m 1h). –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é: {', '.join(TIMEFRAMES_CONFIG['default'])}")

    # Mutually exclusive group for specifying symbol or group filter
    filter_group = parser.add_mutually_exclusive_group()
    filter_group.add_argument('--symbol', type=str, help="–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–≥–Ω–æ–∑ –¥–ª—è –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ —Å–∏–º–≤–æ–ª–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: BTCUSDT).")
    filter_group.add_argument('--symbol-group', type=str, help=f"–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–≥–Ω–æ–∑ –¥–ª—è –ø—Ä–µ–¥–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–π –≥—Ä—É–ø–ø—ã —Å–∏–º–≤–æ–ª–æ–≤ –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: {', '.join(SYMBOL_GROUPS.keys())}).")
    # Note: If neither --symbol nor --symbol-group is specified, predictions will be generated for ALL symbols present in the features files.

    parser.add_argument('--save', action='store_true', help="–°–æ—Ö—Ä–∞–Ω—è—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–æ–≥–Ω–æ–∑–æ–≤ (latest_predictions_*.csv, trade_plan_*.csv, alerts_*.txt) –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é logs.")

    args = parser.parse_args()

    # --- Determine Timeframes to Process ---
    timeframes_to_process = []
    if args.tf:
        # Validate specified timeframes against config defaults or a known list
        # Using config defaults as the source of truth for known timeframes
        allowed_timeframes = TIMEFRAMES_CONFIG['default']
        timeframes_to_process = [t for t in args.tf if t in allowed_timeframes]
        invalid_tfs = [t for t in args.tf if t not in allowed_timeframes]
        if invalid_tfs:
            logger.warning(f"–ò–≥–Ω–æ—Ä–∏—Ä—É—é—Ç—Å—è –Ω–µ–≤–µ—Ä–Ω—ã–µ —Ç–∞–π–º—Ñ—Ä–µ–π–º—ã: {', '.join(invalid_tfs)}. –î–æ–ø—É—Å—Ç–∏–º—ã–µ: {', '.join(allowed_timeframes)}")
        if not timeframes_to_process:
            logger.error("–ù–µ —É–∫–∞–∑–∞–Ω –Ω–∏ –æ–¥–∏–Ω –¥–æ–ø—É—Å—Ç–∏–º—ã–π —Ç–∞–π–º—Ñ—Ä–µ–π–º. –ü—Ä–æ–≥–Ω–æ–∑ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω.")
            # Print help or exit? Let's exit.
            sys.exit(1)
    else:
        # Use default timeframes from config if none specified
        timeframes_to_process = TIMEFRAMES_CONFIG['default']
        logger.info(f"–ù–µ —É–∫–∞–∑–∞–Ω—ã —Ç–∞–π–º—Ñ—Ä–µ–π–º—ã (--tf), –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: {', '.join(timeframes_to_process)}")


    # --- Determine Symbol/Group Filter and File Suffix ---
    symbol_filter = None
    group_filter = None
    files_suffix = "all" # Default suffix if no filter

    if args.symbol:
        symbol_filter = args.symbol.upper() # Ensure uppercase
        files_suffix = symbol_filter # Suffix is the symbol name
        logger.info(f"–ü—Ä–æ–≥–Ω–æ–∑ –¥–ª—è —Å–∏–º–≤–æ–ª–∞: {symbol_filter}.")
    elif args.symbol_group:
        group_name = args.symbol_group.lower() # Ensure lowercase
        if group_name in SYMBOL_GROUPS:
            group_filter = group_name
            files_suffix = group_filter # Suffix is the group name
            logger.info(f"–ü—Ä–æ–≥–Ω–æ–∑ –¥–ª—è –≥—Ä—É–ø–ø—ã —Å–∏–º–≤–æ–ª–æ–≤: {group_filter}.")
        else:
            logger.error(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –≥—Ä—É–ø–ø–∞ —Å–∏–º–≤–æ–ª–æ–≤: '{args.symbol_group}'. –î–æ—Å—Ç—É–ø–Ω—ã–µ –≥—Ä—É–ø–ø—ã: {list(SYMBOL_GROUPS.keys())}. –ü—Ä–æ–≥–Ω–æ–∑ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω.")
            sys.exit(1)
    else:
        # No filter specified - process all symbols
        files_suffix = "all" # Suffix is 'all'
        logger.info("–ü—Ä–æ–≥–Ω–æ–∑ –¥–ª—è –≤—Å–µ—Ö —Å–∏–º–≤–æ–ª–æ–≤ (–±–µ–∑ —Ñ–∏–ª—å—Ç—Ä–∞ –ø–æ —Å–∏–º–≤–æ–ª—É/–≥—Ä—É–ø–ø–µ).")


    # --- Run the prediction process ---
    try:
        # Call the main prediction function from the models module
        # Pass the determined timeframes and filter criteria
        predictions_data = generate_predictions(
            timeframes_to_process,
            symbol_filter=symbol_filter,
            group_filter=group_filter # Pass the group filter key
        )

        # --- Handle Output ---
        if args.save:
            # Call the save function from the models module
            save_predictions_and_plan(predictions_data, files_suffix)

        # Always print results to console
        print_predictions_to_console(predictions_data)


    except KeyboardInterrupt:
        logger.warning(f"\n–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–æ–≥–Ω–æ–∑–æ–≤ –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º (Ctrl+C).")
        sys.exit(130) # Standard Unix exit code for Ctrl+C
    except Exception as e:
        logger.error(f"üí• –ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–æ–≥–Ω–æ–∑–æ–≤: {e}", exc_info=True)
        sys.exit(1) # Standard Unix exit code for general error