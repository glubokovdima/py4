import requests
import sqlite3
import time
from datetime import datetime, timedelta, timezone
import os
import argparse
from tqdm import tqdm
import logging
import sys # –î–ª—è sys.exit –ø—Ä–∏ Ctrl+C

# –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é data, –µ—Å–ª–∏ –µ–µ –Ω–µ—Ç (–¥–ª—è update_log.txt)
os.makedirs('data', exist_ok=True)
# –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é database, –µ—Å–ª–∏ –µ–µ –Ω–µ—Ç
os.makedirs('database', exist_ok=True)


logging.basicConfig(
    level=logging.INFO,
    format='[%(asctime)s] %(levelname)s ‚Äî %(message)s',
    handlers=[
        logging.FileHandler("data/update_log.txt", encoding='utf-8'), # –õ–æ–≥ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –æ—Å—Ç–∞–µ—Ç—Å—è –≤ data
        logging.StreamHandler()
    ]
)

CORE_SYMBOLS = [
    'BTCUSDT', 'ETHUSDT', 'BNBUSDT', 'XRPUSDT', 'LTCUSDT',
    'BCHUSDT', 'LINKUSDT', 'DOTUSDT', 'ADAUSDT', 'SOLUSDT',
    'AVAXUSDT', 'TRXUSDT', 'UNIUSDT'
]

TIMEFRAMES = {
    '1m': '1m',
    '5m': '5m',
    '15m': '15m',
    '30m': '30m',
    '1h': '1h',
    '4h': '4h',
    '1d': '1d'
}

TF_HOURS_BACK = {
    '1m': 5 * 24,
    '5m': 14 * 24,
    '15m': 30 * 24,
    '30m': 30 * 24,
    '1h': 90 * 24,
    '4h': 180 * 24,
    '1d': 365 * 3 * 24
}

DB_PATH = 'database/market_data.db' # –ò–ó–ú–ï–ù–ï–ù–û
BINANCE_URL = 'https://api.binance.com/api/v3/klines'
CANDLE_LIMIT = 1000

def get_tf_ms(tf):
    mult = {'m': 60, 'h': 3600, 'd': 86400}
    num_str = ''.join(filter(str.isdigit, tf))
    unit = ''.join(filter(str.isalpha, tf))
    return int(num_str) * mult[unit] * 1000

def init_db():
    # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è –ë–î —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    os.makedirs(os.path.dirname(DB_PATH), exist_ok=True)
    conn = sqlite3.connect(DB_PATH)
    cursor = conn.cursor()
    for tf_val in TIMEFRAMES: # –ò—Å–ø–æ–ª—å–∑—É–µ–º TIMEFRAMES.keys() –∏–ª–∏ TIMEFRAMES.values() –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
        cursor.execute(f'''
            CREATE TABLE IF NOT EXISTS candles_{tf_val} (
                symbol TEXT,
                timestamp INTEGER,
                open REAL,
                high REAL,
                low REAL,
                close REAL,
                volume REAL,
                PRIMARY KEY (symbol, timestamp)
            )
        ''')
    conn.commit()
    conn.close()
    logging.info(f"–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö '{DB_PATH}' –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞/–ø—Ä–æ–≤–µ—Ä–µ–Ω–∞.")

def fetch_klines(symbol, tf_interval, start_time): # tf –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω –≤ tf_interval –≤–æ –∏–∑–±–µ–∂–∞–Ω–∏–µ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–∞
    params = {
        'symbol': symbol,
        'interval': tf_interval,
        'startTime': start_time,
        'limit': CANDLE_LIMIT
    }
    try:
        response = requests.get(BINANCE_URL, params=params, timeout=10)
        response.raise_for_status()
        return response.json()
    except requests.exceptions.RequestException as e: # –ë–æ–ª–µ–µ –æ–±—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—Å–µ—Ö –æ—à–∏–±–æ–∫ requests
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ {symbol}-{tf_interval} (startTime: {start_time}): {e}")
        return []
    except Exception as e:
        logging.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ {symbol}-{tf_interval}: {e}")
        return []


def insert_klines(conn, tf_key, symbol, klines): # tf –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω –≤ tf_key
    cursor = conn.cursor()
    count = 0
    for k in klines:
        try:
            cursor.execute(f'''
                INSERT OR IGNORE INTO candles_{tf_key}
                (symbol, timestamp, open, high, low, close, volume)
                VALUES (?, ?, ?, ?, ?, ?, ?)
            ''', (symbol, int(k[0]), float(k[1]), float(k[2]), float(k[3]), float(k[4]), float(k[5])))
            if cursor.rowcount > 0:
                count += 1
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –≤—Å—Ç–∞–≤–∫–∏ —Å–≤–µ—á–∏ {symbol}-{tf_key}-{k[0]}: {e}")
    conn.commit()
    return count

def update_recent(tf_key): # tf –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω –≤ tf_key
    logging.info(f"[Mini Update] ‚è≥ –ù–∞—á–∞–ª–æ –∏–Ω–∫—Ä–µ–º–µ–Ω—Ç–∞–ª—å–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–ª—è —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞: {tf_key}")
    init_db() # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –ë–î –∏ —Ç–∞–±–ª–∏—Ü—ã —Å—É—â–µ—Å—Ç–≤—É—é—Ç
    conn = sqlite3.connect(DB_PATH)
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º tf_key –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∑–Ω–∞—á–µ–Ω–∏—è –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ –∏–∑ TIMEFRAMES
    interval_str = TIMEFRAMES.get(tf_key)
    if not interval_str:
        logging.error(f"–ù–µ–≤–µ—Ä–Ω—ã–π –∫–ª—é—á —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞: {tf_key}. –ü—Ä–æ–ø—É—Å–∫.")
        conn.close()
        return

    step_ms = get_tf_ms(tf_key) # tf_key —ç—Ç–æ '1m', '5m' –∏ —Ç.–¥.
    hours_back = TF_HOURS_BACK.get(tf_key, 48) # 48 —á–∞—Å–æ–≤ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é, –µ—Å–ª–∏ tf_key –Ω–µ –Ω–∞–π–¥–µ–Ω
    start_ts = int((datetime.utcnow() - timedelta(hours=hours_back)).timestamp() * 1000)

    logging.info(f"–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ {tf_key} –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ {hours_back} —á–∞—Å–æ–≤ (—Å {datetime.fromtimestamp(start_ts/1000, timezone.utc)} UTC)")

    for symbol in tqdm(CORE_SYMBOLS, desc=f"–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ {tf_key}", unit="symbol"):
        try:
            klines = fetch_klines(symbol, interval_str, start_ts)
            if klines:
                inserted_count = insert_klines(conn, tf_key, symbol, klines) # –ü–µ—Ä–µ–¥–∞–µ–º tf_key –¥–ª—è –∏–º–µ–Ω–∏ —Ç–∞–±–ª–∏—Ü—ã
                if inserted_count > 0:
                    logging.info(f"{symbol} [{tf_key}] ‚Äî –î–æ–±–∞–≤–ª–µ–Ω–æ: {inserted_count} —Å–≤–µ—á–µ–π")
                # else:
                #     logging.debug(f"{symbol} [{tf_key}] ‚Äî –ù–µ—Ç –Ω–æ–≤—ã—Ö —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Å–≤–µ—á–µ–π –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è.")
            else:
                logging.warning(f"{symbol} [{tf_key}] ‚Äî –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ—Ç API (–≤–æ–∑–º–æ–∂–Ω–æ, –Ω–µ—Ç –Ω–æ–≤—ã—Ö —Å–≤–µ—á–µ–π –∏–ª–∏ –æ—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞)")
        except Exception as e:
            logging.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ {symbol} [{tf_key}]: {e}", exc_info=True)
            continue # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å–æ —Å–ª–µ–¥—É—é—â–∏–º —Å–∏–º–≤–æ–ª–æ–º

    conn.close()
    logging.info(f"[Mini Update] ‚úÖ –ò–Ω–∫—Ä–µ–º–µ–Ω—Ç–∞–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ {tf_key} –∑–∞–≤–µ—Ä—à–µ–Ω–æ.")

if __name__ == '__main__':
    parser = argparse.ArgumentParser(description="–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö N —á–∞—Å–æ–≤ –ø–æ —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞–º")
    parser.add_argument('--tf', nargs='*', default=list(TIMEFRAMES.keys()), # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤—Å–µ —Ç–∞–π–º—Ñ—Ä–µ–π–º—ã
                        help=f"–¢–∞–π–º—Ñ—Ä–µ–π–º—ã –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä: --tf 1m 5m 15m). –î–æ—Å—Ç—É–ø–Ω—ã–µ: {', '.join(TIMEFRAMES.keys())}")
    args = parser.parse_args()

    selected_timeframes = args.tf
    if not selected_timeframes:
        logging.warning("–ù–µ —É–∫–∞–∑–∞–Ω—ã —Ç–∞–π–º—Ñ—Ä–µ–π–º—ã –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ --tf –∏–ª–∏ –∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–µ–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è –≤—Å–µ—Ö.")
        sys.exit(1)

    print(f"–ó–∞–ø—É—Å–∫ mini_update –¥–ª—è —Ç–∞–π–º—Ñ—Ä–µ–π–º–æ–≤: {', '.join(selected_timeframes)}")
    try:
        for tf_arg in selected_timeframes:
            if tf_arg in TIMEFRAMES:
                update_recent(tf_arg)
            else:
                logging.error(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∞–π–º—Ñ—Ä–µ–π–º: {tf_arg}. –ü—Ä–æ–ø—É—Å–∫. –î–æ—Å—Ç—É–ø–Ω—ã–µ: {', '.join(TIMEFRAMES.keys())}")
    except KeyboardInterrupt:
        print("\n[Mini Update] üõë –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º (Ctrl+C).")
        sys.exit(130) # –ö–æ–¥ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –ø–µ—Ä–µ—Ö–≤–∞—Ç–∞ –≤ main_cli.py
    except Exception as e:
        logging.error(f"[Mini Update] üí• –ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}", exc_info=True)
        sys.exit(1)
    print("–í—Å–µ —É–∫–∞–∑–∞–Ω–Ω—ã–µ —Ç–∞–π–º—Ñ—Ä–µ–π–º—ã –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã.")