# core/cli/main.py
"""
Main Command-Line Interface (CLI) for the Crypto Prediction project.
Provides a menu-driven interface to run various scripts and pipelines.
"""
import subprocess
import sys
import os
import shutil
import argparse  # Keep for potential future CLI args to this script itself
import logging

# --- Import functions from core modules ---
from ..helpers.utils import (
    load_config,
    print_header,
    run_script,  # Still used for scripts not yet fully integrated as direct calls
    select_timeframes_interactive,
    clear_training_artifacts_interactive,
    ensure_base_directories
)
from ..data_ingestion.historical_data_loader import main_historical_load_logic
from ..data_ingestion.incremental_data_loader import main_incremental_load_logic
from ..features.preprocessor import main_preprocess_logic
from ..training.trainer import main_train_logic
from ..prediction.predictor import main_predict_all_logic
from ..backtesting.backtester import main_backtest_logic
from ..pipelines.main_pipeline import main_pipeline_logic

# from ..analysis.symbol_selector import main_symbol_selection_logic # If you add a menu option for it
# from ..path.to.gpu_test_logic import main_gpu_test_logic # If gpu_test.py is refactored

# Configure logging for this module
logger = logging.getLogger(__name__)

# --- Global Configuration (Loaded from YAML) ---
CONFIG = {}
PYTHON_EXECUTABLE = sys.executable

# Default directory paths (can be overridden by config.yaml if keys exist)
# These are fallbacks if config doesn't specify them under 'directories'
DEFAULT_MODELS_DIR_NAME = "models"
DEFAULT_LOGS_DIR_NAME = "logs"
DEFAULT_DATA_DIR_NAME = "data"
DEFAULT_DATABASE_DIR_NAME = "database"
DEFAULT_UPDATE_LOG_FILENAME = "update_log.txt"  # Filename, dir comes from data_dir


def setup_logging(log_level_str="INFO"):
    """Configures basic logging for the CLI application."""
    log_level = getattr(logging, log_level_str.upper(), logging.INFO)
    # Basic config that will apply if no other handlers are configured on root
    # If other modules configure their own loggers, this won't interfere badly.
    logging.basicConfig(
        level=log_level,
        format='[%(asctime)s] %(levelname)s [%(name)s.%(funcName)s] - %(message)s',
        handlers=[
            logging.StreamHandler(sys.stdout)
            # Optionally add a FileHandler for CLI-specific operations
            # logging.FileHandler("logs/cli_main_operations.log", mode='a', encoding='utf-8')
        ],
        force=True  # If basicConfig was already called, force will reconfigure. Use with caution.
    )
    logger.info(f"CLI logging initialized at level {log_level_str}")


def _get_config_value(key_path, default_value=None):
    """
    Safely retrieves a value from the loaded CONFIG dictionary using a dot-separated key path.
    Example: _get_config_value("directories.models_dir", "models")
    """
    global CONFIG
    if not CONFIG:  # Should have been loaded by main_cli_entry_point
        logger.warning("Attempted to get config value, but CONFIG is not loaded. Using default.")
        return default_value

    keys = key_path.split('.')
    value = CONFIG
    try:
        for k in keys:
            if isinstance(value, dict):
                value = value[k]
            else:
                logger.debug(f"Config path broken at '{k}' in '{key_path}'. Parent not a dict.")
                return default_value
        return value
    except (KeyError, TypeError):
        # logger.debug(f"Config key '{key_path}' not found or type error, using default: {default_value}.")
        return default_value


def _get_project_relative_path(config_key_for_dir, default_dir_name, filename=None):
    """
    Constructs a full path relative to the project root.
    Uses config for directory name if available, otherwise default_dir_name.
    Optionally appends a filename.

    Args:
        config_key_for_dir (str): Dot-separated key for the directory in config (e.g., "directories.models_dir").
        default_dir_name (str): Default directory name if not in config.
        filename (str, optional): Filename to append to the directory path.

    Returns:
        str: Absolute path.
    """
    project_root = os.path.abspath(os.path.join(os.path.dirname(__file__), "..", ".."))

    # Get directory part from config or use default
    configured_dir_part = _get_config_value(config_key_for_dir, default_dir_name)

    # If configured_dir_part is already absolute, use it. Otherwise, join with project_root.
    if os.path.isabs(configured_dir_part):
        dir_abs_path = configured_dir_part
    else:
        dir_abs_path = os.path.join(project_root, configured_dir_part)

    if filename:
        return os.path.join(dir_abs_path, filename)
    return dir_abs_path


def _handle_function_call_result(return_code, success_msg, failure_msg_prefix):
    """Handles logging and printing for direct function call results."""
    if return_code == 0:
        logger.info(success_msg)
        print(f"‚úÖ  {success_msg}")
    elif return_code == 130:  # Specific code for user interruption if functions return it
        logger.warning(f"üî∂  {failure_msg_prefix} –ø—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.")
        print(f"üî∂  {failure_msg_prefix} –ø—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.")
    else:
        logger.error(f"‚ùå  {failure_msg_prefix} –∑–∞–≤–µ—Ä—à–∏–ª–æ—Å—å —Å –æ—à–∏–±–∫–æ–π (–∫–æ–¥: {return_code}).")
        print(f"‚ùå  {failure_msg_prefix} –∑–∞–≤–µ—Ä—à–∏–ª–æ—Å—å —Å –æ—à–∏–±–∫–æ–π (–∫–æ–¥: {return_code}).")
    return return_code  # Propagate for pipeline handling


def main_menu():
    """
    Displays the main menu and handles user choices.
    """
    # Config should be loaded by main_cli_entry_point before this menu runs.
    global CONFIG
    if not CONFIG:
        logger.critical("CLI Main Menu: CONFIG not loaded. This should not happen. Exiting.")
        print("‚ùå  –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞. –í—ã—Ö–æ–¥.")
        sys.exit(1)

    # Get directory paths from config or use defaults
    models_dir_abs = _get_project_relative_path("directories.models_dir", DEFAULT_MODELS_DIR_NAME)
    logs_dir_abs = _get_project_relative_path("directories.logs_dir", DEFAULT_LOGS_DIR_NAME)
    data_dir_abs = _get_project_relative_path("directories.data_dir", DEFAULT_DATA_DIR_NAME)
    database_dir_abs = _get_project_relative_path("directories.database_dir", DEFAULT_DATABASE_DIR_NAME)

    # update_log_file is a filename within data_dir
    update_log_filename_cfg = _get_config_value("update_log_file", "").split('/')[-1] or DEFAULT_UPDATE_LOG_FILENAME
    update_log_file_abs = os.path.join(data_dir_abs, update_log_filename_cfg)

    # Ensure base directories exist
    ensure_base_directories([database_dir_abs, data_dir_abs, models_dir_abs, logs_dir_abs])

    # Get timeframe list and symbol groups from config
    core_timeframes = _get_config_value("core_timeframes_list", ['1m', '5m', '15m', '30m', '1h', '4h', '1d'])
    symbol_groups_dict = _get_config_value("symbol_groups", {})
    available_symbol_groups = list(symbol_groups_dict.keys())

    while True:
        print_header("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
        print("--- üì¶ –°–±–æ—Ä –∏ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –î–∞–Ω–Ω—ã—Ö ---")
        print("  1. –ü–æ–ª–Ω–∞—è (–≥–ª—É–±–æ–∫–∞—è) –∑–∞–≥—Ä—É–∑–∫–∞ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö")
        print("  2. –ò–Ω–∫—Ä–µ–º–µ–Ω—Ç–∞–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–≤–µ–∂–∏—Ö –¥–∞–Ω–Ω—ã—Ö")
        print("--- ‚öôÔ∏è  –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏ –û–±—É—á–µ–Ω–∏–µ –ú–æ–¥–µ–ª–µ–π ---")
        print("  3. –ü–æ—Å—Ç—Ä–æ–∏—Ç—å –ø—Ä–∏–∑–Ω–∞–∫–∏ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Ç–∞–π–º—Ñ—Ä–µ–π–º–æ–≤")
        print("  4. –û–±—É—á–∏—Ç—å –º–æ–¥–µ–ª–∏ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Ç–∞–π–º—Ñ—Ä–µ–π–º–æ–≤")
        print("--- üöÄ –ü–∞–π–ø–ª–∞–π–Ω—ã (–ö–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏) ---")
        print("  5. –ü–∞–π–ø–ª–∞–π–Ω: –ú–∏–Ω–∏-–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ -> –ü—Ä–∏–∑–Ω–∞–∫–∏ -> –û–±—É—á–µ–Ω–∏–µ")
        print("  6. –ü–∞–π–ø–ª–∞–π–Ω: –ü–æ–ª–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ -> –ü—Ä–∏–∑–Ω–∞–∫–∏ -> –û–±—É—á–µ–Ω–∏–µ")
        print("  7. –ü–û–õ–ù–´–ô –ü–ï–†–ï–°–ë–û–†: –û—á–∏—Å—Ç–∫–∞ -> –ü–æ–ª–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ -> –ü—Ä–∏–∑–Ω–∞–∫–∏ -> –û–±—É—á–µ–Ω–∏–µ")
        print("--- üìä –ü—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –ê–Ω–∞–ª–∏–∑ ---")
        print("  8. –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–≥–Ω–æ–∑—ã –∏ —Ç–æ—Ä–≥–æ–≤—ã–π –ø–ª–∞–Ω")
        print("  9. –ó–∞–ø—É—Å—Ç–∏—Ç—å –±—ç–∫—Ç–µ—Å—Ç –¥–ª—è –æ–¥–Ω–æ–≥–æ —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞")
        print("--- üõ†Ô∏è  –£—Ç–∏–ª–∏—Ç—ã ---")
        print(" 10. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å GPU (gpu_test.py)")
        print(" 11. –û–ß–ò–°–¢–ò–¢–¨ –≤—Å–µ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç—ã –æ–±—É—á–µ–Ω–∏—è")
        print("  0. –í—ã—Ö–æ–¥")

        choice = input("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –æ–ø—Ü–∏–∏: ").strip()

        try:
            if choice == '1':
                print_header("–ü–æ–ª–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö")
                ret_code = main_historical_load_logic(run_all_core_symbols=True, timeframes_to_process=None)
                _handle_function_call_result(ret_code, "–ü–æ–ª–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.", "–ü–æ–ª–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö")

            elif choice == '2':
                tfs = select_timeframes_interactive("–ò–Ω–∫—Ä–µ–º–µ–Ω—Ç–∞–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ", core_timeframes)
                if tfs:
                    print_header(f"–ò–Ω–∫—Ä–µ–º–µ–Ω—Ç–∞–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–ª—è {', '.join(tfs)}")
                    ret_code = main_incremental_load_logic(timeframes_to_process=tfs)
                    _handle_function_call_result(ret_code, f"–ò–Ω–∫—Ä–µ–º–µ–Ω—Ç–∞–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–ª—è {', '.join(tfs)} —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–æ.", f"–ò–Ω–∫—Ä–µ–º–µ–Ω—Ç–∞–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–ª—è {', '.join(tfs)}")

            elif choice == '3':  # Preprocess Features
                tfs = select_timeframes_interactive("–ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤", core_timeframes)
                if tfs:
                    group_or_sym_input = input(
                        f"–í–≤–µ–¥–∏—Ç–µ –≥—Ä—É–ø–ø—É ({'/'.join(available_symbol_groups)}) –∏–ª–∏ —Å–∏–º–≤–æ–ª (–Ω–∞–ø—Ä–∏–º–µ—Ä: BTCUSDT),\n"
                        "–∏–ª–∏ –æ—Å—Ç–∞–≤—å—Ç–µ –ø—É—Å—Ç—ã–º –¥–ª—è –≤—Å–µ—Ö: "
                    ).strip()

                    symbol_filter_val, group_filter_val = None, None
                    desc_suffix = "–¥–ª—è –≤—Å–µ—Ö —Å–∏–º–≤–æ–ª–æ–≤"
                    if group_or_sym_input:
                        if group_or_sym_input.lower() in available_symbol_groups:
                            group_filter_val = group_or_sym_input.lower()
                            desc_suffix = f"–¥–ª—è –≥—Ä—É–ø–ø—ã {group_filter_val}"
                        else:
                            symbol_filter_val = group_or_sym_input.upper()
                            desc_suffix = f"–¥–ª—è —Å–∏–º–≤–æ–ª–∞ {symbol_filter_val}"

                    print_header(f"–ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ {desc_suffix}")
                    all_tf_success = True
                    for tf_item in tfs:
                        logger.info(f"CLI: –ó–∞–ø—É—Å–∫ main_preprocess_logic –¥–ª—è TF={tf_item}, Symbol={symbol_filter_val}, Group={group_filter_val}")
                        ret_code = main_preprocess_logic(
                            timeframe=tf_item,
                            symbol_filter=symbol_filter_val,
                            symbol_group_filter=group_filter_val
                        )
                        _handle_function_call_result(ret_code, f"–ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –¥–ª—è {tf_item} {desc_suffix} —É—Å–ø–µ—à–Ω–æ.", f"–ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –¥–ª—è {tf_item} {desc_suffix}")
                        if ret_code != 0:
                            all_tf_success = False
                            logger.warning(f"–ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –¥–ª—è {tf_item} {desc_suffix} –Ω–µ —É–¥–∞–ª–æ—Å—å. –ü—Ä–æ–ø—É—Å–∫ –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –¢–§ –¥–ª—è —ç—Ç–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏.")
                            break
                    if all_tf_success: print("‚úÖ –í—Å–µ –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —Ç–∞–π–º—Ñ—Ä–µ–π–º—ã –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –ø—Ä–∏–∑–Ω–∞–∫–æ–≤.")


            elif choice == '4':  # Train Models
                tfs = select_timeframes_interactive("–û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–µ–π", core_timeframes)
                if tfs:
                    group_or_sym_input = input(
                        f"–í–≤–µ–¥–∏—Ç–µ –≥—Ä—É–ø–ø—É ({'/'.join(available_symbol_groups)}) –∏–ª–∏ —Å–∏–º–≤–æ–ª (–Ω–∞–ø—Ä–∏–º–µ—Ä: BTCUSDT),\n"
                        "–∏–ª–∏ –æ—Å—Ç–∞–≤—å—Ç–µ –ø—É—Å—Ç—ã–º –¥–ª—è –æ–±—É—á–µ–Ω–∏—è –æ–±—â–∏—Ö –º–æ–¥–µ–ª–µ–π –ø–æ –¢–§ (–µ—Å–ª–∏ –ø—Ä–∏–º–µ–Ω–∏–º–æ): "  # Adjusted prompt
                    ).strip()

                    filter_val, is_group = None, False
                    desc_suffix = "–æ–±—â–∏—Ö –º–æ–¥–µ–ª–µ–π –ø–æ –¢–§"  # Default if no symbol/group
                    if group_or_sym_input:
                        if group_or_sym_input.lower() in available_symbol_groups:
                            filter_val = group_or_sym_input.lower()
                            is_group = True
                            desc_suffix = f"–º–æ–¥–µ–ª–µ–π –¥–ª—è –≥—Ä—É–ø–ø—ã {filter_val}"
                        else:
                            filter_val = group_or_sym_input.upper()
                            is_group = False
                            desc_suffix = f"–º–æ–¥–µ–ª–µ–π –¥–ª—è —Å–∏–º–≤–æ–ª–∞ {filter_val}"

                    print_header(f"–û–±—É—á–µ–Ω–∏–µ {desc_suffix}")
                    all_tf_success_train = True
                    for tf_item in tfs:
                        logger.info(f"CLI: –ó–∞–ø—É—Å–∫ main_train_logic –¥–ª—è TF={tf_item}, Filter={filter_val}, IsGroup={is_group}")
                        ret_code = main_train_logic(
                            timeframe_to_train=tf_item,
                            symbol_or_group_filter=filter_val,
                            is_group_model=is_group
                        )
                        _handle_function_call_result(ret_code, f"–û–±—É—á–µ–Ω–∏–µ {desc_suffix} –¥–ª—è {tf_item} —É—Å–ø–µ—à–Ω–æ.", f"–û–±—É—á–µ–Ω–∏–µ {desc_suffix} –¥–ª—è {tf_item}")
                        if ret_code != 0:
                            all_tf_success_train = False
                            logger.warning(f"–û–±—É—á–µ–Ω–∏–µ {desc_suffix} –¥–ª—è {tf_item} –Ω–µ —É–¥–∞–ª–æ—Å—å. –ü—Ä–æ–ø—É—Å–∫ –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –¢–§.")
                            break
                    if all_tf_success_train: print(f"‚úÖ –í—Å–µ –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —Ç–∞–π–º—Ñ—Ä–µ–π–º—ã –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã –¥–ª—è –æ–±—É—á–µ–Ω–∏—è {desc_suffix}.")


            elif choice == '5':  # Pipeline: Mini-update -> Features -> Train
                tfs = select_timeframes_interactive("–ü–∞–π–ø–ª–∞–π–Ω: –ú–∏–Ω–∏-–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ -> –ü—Ä–∏–∑–Ω–∞–∫–∏ -> –û–±—É—á–µ–Ω–∏–µ", core_timeframes)
                if tfs:
                    print_header("–ó–∞–ø—É—Å–∫ –ø–∞–π–ø–ª–∞–π–Ω–∞: –ú–∏–Ω–∏-–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ -> –ü—Ä–∏–∑–Ω–∞–∫–∏ -> –û–±—É—á–µ–Ω–∏–µ")
                    # Pipeline logic now expects filters too
                    ret_code = main_pipeline_logic(
                        timeframes_to_process=tfs,
                        do_training=True,
                        skip_final_predict=True,  # As per original menu option
                        use_full_historical_update=False
                        # Add symbol/group filter selection here if you want pipelines to be filterable
                    )
                    _handle_function_call_result(ret_code, "–ü–∞–π–ø–ª–∞–π–Ω (–º–∏–Ω–∏-–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ, –ø—Ä–∏–∑–Ω–∞–∫–∏, –æ–±—É—á–µ–Ω–∏–µ) —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω.", "–ü–∞–π–ø–ª–∞–π–Ω (–º–∏–Ω–∏-–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ, –ø—Ä–∏–∑–Ω–∞–∫–∏, –æ–±—É—á–µ–Ω–∏–µ)")

            elif choice == '6':  # Pipeline: Full-update -> Features -> Train
                tfs = select_timeframes_interactive("–ü–∞–π–ø–ª–∞–π–Ω: –ü–æ–ª–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ -> –ü—Ä–∏–∑–Ω–∞–∫–∏ -> –û–±—É—á–µ–Ω–∏–µ", core_timeframes)
                if tfs:
                    print_header("–ó–∞–ø—É—Å–∫ –ø–∞–π–ø–ª–∞–π–Ω–∞: –ü–æ–ª–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ -> –ü—Ä–∏–∑–Ω–∞–∫–∏ -> –û–±—É—á–µ–Ω–∏–µ")
                    ret_code = main_pipeline_logic(
                        timeframes_to_process=tfs,
                        do_training=True,
                        skip_final_predict=True,  # As per original menu option
                        use_full_historical_update=True
                    )
                    _handle_function_call_result(ret_code, "–ü–∞–π–ø–ª–∞–π–Ω (–ø–æ–ª–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ, –ø—Ä–∏–∑–Ω–∞–∫–∏, –æ–±—É—á–µ–Ω–∏–µ) —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω.", "–ü–∞–π–ø–ª–∞–π–Ω (–ø–æ–ª–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ, –ø—Ä–∏–∑–Ω–∞–∫–∏, –æ–±—É—á–µ–Ω–∏–µ)")

            elif choice == '7':  # FULL RESET: Clear -> Full Update -> Features -> Train
                tfs = select_timeframes_interactive(
                    "–ü–û–õ–ù–´–ô –ü–ï–†–ï–°–ë–û–†: –û—á–∏—Å—Ç–∫–∞ -> –ü–æ–ª–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ -> –ü—Ä–∏–∑–Ω–∞–∫–∏ -> –û–±—É—á–µ–Ω–∏–µ", core_timeframes)
                if tfs:
                    print_header("–ù–∞—á–∞–ª–æ –ü–û–õ–ù–û–ì–û –ü–ï–†–ï–°–ë–û–†–ê")
                    clear_training_artifacts_interactive(
                        models_dir_abs, logs_dir_abs, data_dir_abs,
                        database_dir_abs, update_log_file_abs  # Pass correct absolute paths
                    )
                    logger.info("CLI: –ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ –ø–µ—Ä–µ—Å–±–æ—Ä–∞ (–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ, –ø—Ä–∏–∑–Ω–∞–∫–∏, –æ–±—É—á–µ–Ω–∏–µ)...")
                    ret_code = main_pipeline_logic(
                        timeframes_to_process=tfs,
                        do_training=True,
                        skip_final_predict=True,  # As per original
                        use_full_historical_update=True
                    )
                    if ret_code == 0:  # Check specific return code from pipeline
                        print_header("–ü–û–õ–ù–´–ô –ü–ï–†–ï–°–ë–û–† –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ.")
                        logger.info("–ü–û–õ–ù–´–ô –ü–ï–†–ï–°–ë–û–† –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ.")
                    else:
                        print_header("–ü–û–õ–ù–´–ô –ü–ï–†–ï–°–ë–û–† –ø—Ä–µ—Ä–≤–∞–Ω –∏–ª–∏ –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–æ–π.")
                        logger.error("–ü–û–õ–ù–´–ô –ü–ï–†–ï–°–ë–û–† –ø—Ä–µ—Ä–≤–∞–Ω –∏–ª–∏ –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–æ–π.")

            elif choice == '8':  # Generate predictions
                print_header("–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–æ–≥–Ω–æ–∑–æ–≤")
                group_or_sym_predict_input = input(
                    f"–í–≤–µ–¥–∏—Ç–µ –≥—Ä—É–ø–ø—É ({'/'.join(available_symbol_groups)}) –∏–ª–∏ —Å–∏–º–≤–æ–ª (–Ω–∞–ø—Ä–∏–º–µ—Ä: BTCUSDT),\n"
                    "–∏–ª–∏ –æ—Å—Ç–∞–≤—å—Ç–µ –ø—É—Å—Ç—ã–º –¥–ª—è –≤—Å–µ—Ö: "
                ).strip()

                symbol_filter_pred, group_filter_pred = None, None
                desc_suffix_pred = "–¥–ª—è –≤—Å–µ—Ö –ø–∞—Ä"
                if group_or_sym_predict_input:
                    if group_or_sym_predict_input.lower() in available_symbol_groups:
                        group_filter_pred = group_or_sym_predict_input.lower()
                        desc_suffix_pred = f"–¥–ª—è –≥—Ä—É–ø–ø—ã {group_filter_pred}"
                    else:
                        symbol_filter_pred = group_or_sym_predict_input.upper()
                        desc_suffix_pred = f"–¥–ª—è —Å–∏–º–≤–æ–ª–∞ {symbol_filter_pred}"

                logger.info(f"CLI: –ó–∞–ø—É—Å–∫ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–æ–≥–Ω–æ–∑–æ–≤ {desc_suffix_pred} (—Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º)...")
                ret_code = main_predict_all_logic(
                    save_output_flag=True,
                    symbol_filter=symbol_filter_pred,
                    group_filter_key=group_filter_pred
                )
                _handle_function_call_result(ret_code, f"–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–æ–≥–Ω–æ–∑–æ–≤ {desc_suffix_pred} —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.", f"–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–æ–≥–Ω–æ–∑–æ–≤ {desc_suffix_pred}")

            elif choice == '9':  # Backtest
                print_header("–ó–∞–ø—É—Å–∫ –±—ç–∫—Ç–µ—Å—Ç–∞")
                # Get TFs choices for backtest from config (or use core_timeframes as fallback)
                backtest_tf_choices = _get_config_value("predict_backtest_timeframes_choices", core_timeframes)
                print("–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–∞–π–º—Ñ—Ä–µ–π–º—ã –¥–ª—è –±—ç–∫—Ç–µ—Å—Ç–∞:", ", ".join(backtest_tf_choices))

                tf_backtest_input = input(f"–í–≤–µ–¥–∏—Ç–µ —Ç–∞–π–º—Ñ—Ä–µ–π–º –¥–ª—è –±—ç–∫—Ç–µ—Å—Ç–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 15m) –∏–ª–∏ 'q' –¥–ª—è –æ—Ç–º–µ–Ω—ã: ").strip()
                if tf_backtest_input.lower() == 'q':
                    continue
                if tf_backtest_input in backtest_tf_choices:
                    # Ask for model suffix for backtest (e.g. if testing a group model)
                    model_suffix_backtest = input(
                        "–í–≤–µ–¥–∏—Ç–µ —Å—É—Ñ—Ñ–∏–∫—Å –º–æ–¥–µ–ª–∏ –¥–ª—è –±—ç–∫—Ç–µ—Å—Ç–∞ (–Ω–∞–ø—Ä. top8, BTCUSDT, –∏–ª–∏ –æ—Å—Ç–∞–≤—å—Ç–µ –ø—É—Å—Ç—ã–º –¥–ª—è –æ–±—â–µ–π –º–æ–¥–µ–ª–∏ –ø–æ –¢–§): "
                    ).strip()

                    logger.info(f"CLI: –ó–∞–ø—É—Å–∫ –±—ç–∫—Ç–µ—Å—Ç–∞ –¥–ª—è TF={tf_backtest_input}, ModelSuffix='{model_suffix_backtest}'...")
                    ret_code = main_backtest_logic(
                        timeframe=tf_backtest_input,
                        model_suffix=model_suffix_backtest if model_suffix_backtest else ""
                        # target_class_names_list can be passed if needed from config
                    )
                    _handle_function_call_result(ret_code, f"–ë—ç–∫—Ç–µ—Å—Ç –¥–ª—è {tf_backtest_input} (–º–æ–¥–µ–ª—å: '{model_suffix_backtest or '–æ–±—â–∞—è'}') —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω.", f"–ë—ç–∫—Ç–µ—Å—Ç –¥–ª—è {tf_backtest_input} (–º–æ–¥–µ–ª—å: '{model_suffix_backtest or '–æ–±—â–∞—è'}')")
                else:
                    logger.warning(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ç–∞–π–º—Ñ—Ä–µ–π–º –¥–ª—è –±—ç–∫—Ç–µ—Å—Ç–∞: {tf_backtest_input}")

            elif choice == '10':  # GPU Test
                # This still calls an external script.
                # If gpu_test.py is refactored into core.utils.gpu_checker.main_gpu_test_logic()
                # then call that directly.
                print_header("–ü—Ä–æ–≤–µ—Ä–∫–∞ GPU")
                run_script([PYTHON_EXECUTABLE, "gpu_test.py"], "–ü—Ä–æ–≤–µ—Ä–∫–∞ GPU")  # Assumes gpu_test.py at project root

            elif choice == '11':  # Clear artifacts
                print_header("–û—á–∏—Å—Ç–∫–∞ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤")
                clear_training_artifacts_interactive(
                    models_dir_abs, logs_dir_abs, data_dir_abs,
                    database_dir_abs, update_log_file_abs  # Pass correct absolute paths
                )

            elif choice == '0':  # Exit
                logger.info("–í—ã—Ö–æ–¥ –∏–∑ –ø—Ä–æ–≥—Ä–∞–º–º—ã –ø–æ –≤—ã–±–æ—Ä—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
                print("–í—ã—Ö–æ–¥ –∏–∑ –ø—Ä–æ–≥—Ä–∞–º–º—ã.")
                sys.exit(0)

            else:  # Invalid input
                logger.warning(f"–ù–µ–≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥ –≤ –º–µ–Ω—é: {choice}")
                print("–ù–µ–≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä –∏–∑ –º–µ–Ω—é.")

        except KeyboardInterrupt:
            logger.info("–û–ø–µ—Ä–∞—Ü–∏—è –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º (Ctrl+C –≤ –º–µ–Ω—é). –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.")
            print("\n–û–ø–µ—Ä–∞—Ü–∏—è –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º (Ctrl+C –≤ –º–µ–Ω—é). –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.")
            continue  # To the main menu loop
        except SystemExit as se:  # Catch sys.exit from direct function calls if they use it for errors
            logger.info(f"–î–µ–π—Å—Ç–≤–∏–µ –∑–∞–≤–µ—Ä—à–∏–ª–æ—Å—å —Å –∫–æ–¥–æ–º –≤—ã—Ö–æ–¥–∞: {se.code}. –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.")
            if se.code != 0:
                print(f"‚ö†Ô∏è  –î–µ–π—Å—Ç–≤–∏–µ –∑–∞–≤–µ—Ä—à–∏–ª–æ—Å—å —Å –æ—à–∏–±–∫–æ–π (–∫–æ–¥: {se.code}).")
            # Continue to main menu unless it's an exit from choice '0'
        except Exception as e:
            logger.critical(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤—ã–±–æ—Ä–∞ –º–µ–Ω—é '{choice}': {e}", exc_info=True)
            print(f"\n‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –æ–ø—Ü–∏–∏ '{choice}'. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏.")
            continue  # To the main menu loop


def main_cli_entry_point():
    """
    The main entry point for the CLI application.
    Initializes logging and configuration, then starts the main menu.
    """
    global CONFIG
    # Setup logging first, so config loading issues are logged.
    # Logging level can be made configurable later (e.g., from env var or CLI arg to this script)
    setup_logging(log_level_str="INFO")

    try:
        CONFIG = load_config()
        if not CONFIG:
            # This is critical. If config doesn't load, many defaults will be used,
            # which might not be what the user expects.
            logger.error("–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: –§–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ (core/config.yaml) –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –∑–∞–≥—Ä—É–∂–µ–Ω. "
                         "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –µ–≥–æ –Ω–∞–ª–∏—á–∏–µ –∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å. –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –º–æ–≥—É—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é.")
            # Allow proceeding with defaults but with a clear warning.
            # Or sys.exit(1) if config is absolutely mandatory.
            # For now, let it proceed so user can see the menu, but functions might fail.
            CONFIG = {}  # Ensure CONFIG is a dict even if loading failed
    except Exception as e_cfg:
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ CLI: {e_cfg}", exc_info=True)
        CONFIG = {}  # Ensure CONFIG is a dict

    try:
        main_menu()
    except KeyboardInterrupt:
        logger.info("–ü—Ä–æ–≥—Ä–∞–º–º–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º (Ctrl+C –∏–∑ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é).")
        print("\n–ü—Ä–æ–≥—Ä–∞–º–º–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º (Ctrl+C).")
        sys.exit(0)  # Exit code 0 for clean user interrupt
    except SystemExit as e:
        logger.info(f"–ü—Ä–æ–≥—Ä–∞–º–º–∞ –∑–∞–≤–µ—Ä—à–∞–µ—Ç—Å—è —Å –∫–æ–¥–æ–º: {e.code} (–ø–µ—Ä–µ—Ö–≤–∞—á–µ–Ω–æ –∏–∑ main_menu).")
        sys.exit(e.code)  # Propagate exit code
    except Exception as e:
        logger.critical(f"–ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤–Ω–µ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é: {e}", exc_info=True)
        sys.exit(1)  # General error


if __name__ == "__main__":
    main_cli_entry_point()
