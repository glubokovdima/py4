# main_cli.py
import subprocess
import sys
import os
import shutil
import argparse

# --- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ---
PYTHON_EXECUTABLE = sys.executable
# –¢–∞–π–º—Ñ—Ä–µ–π–º—ã –º–æ–∂–Ω–æ –≤—ã–Ω–µ—Å—Ç–∏ –≤ –æ–±—â–∏–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ñ–∞–π–ª –∏–ª–∏ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∑–¥–µ—Å—å
# –î–ª—è –ø—Ä–∏–º–µ—Ä–∞, –≤–æ–∑—å–º–µ–º –∏–∑ mini_update_binance_data.py (–Ω–æ –ª—É—á—à–µ –∏–º–µ—Ç—å –æ–¥–∏–Ω –∏—Å—Ç–æ—á–Ω–∏–∫ –∏—Å—Ç–∏–Ω—ã)
CORE_TIMEFRAMES_LIST = ['1m', '5m', '15m', '30m', '1h', '4h', '1d']

# –î–æ–ø—É—Å—Ç–∏–º—ã–µ –≥—Ä—É–ø–ø—ã —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è --symbol-group
# >>> –î–û–ë–ê–í–õ–ï–ù–û —Å–æ–≥–ª–∞—Å–Ω–æ –ø–∞—Ç—á—É
SYMBOL_GROUPS = ['top8', 'meme', 'defi']

# –î–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
MODELS_DIR = "models"
LOGS_DIR = "logs"
DATA_FEATURES_DIR = "data"  # –ü–∞–ø–∫–∞, –≥–¥–µ —Ö—Ä–∞–Ω—è—Ç—Å—è features_*.pkl –∏ sample_*.csv
DATABASE_DIR = "database"
# –õ–æ–≥-—Ñ–∞–π–ª –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö, –∫–æ—Ç–æ—Ä—ã–π –Ω–µ –¥–æ–ª–∂–µ–Ω —É–¥–∞–ª—è—Ç—å—Å—è –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤ –æ–±—É—á–µ–Ω–∏—è
UPDATE_LOG_FILE = os.path.join(DATA_FEATURES_DIR, "update_log.txt")


# --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ---
def print_header(title):
    print("\n" + "=" * 50)
    print(f" {title.center(48)} ")
    print("=" * 50)


def run_script(command_list, description):
    print(f"\n‚è≥  –ó–∞–ø—É—Å–∫: {description}...")
    print(f"    –ö–æ–º–∞–Ω–¥–∞: {' '.join(command_list)}")
    try:
        # –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ capture_output=True –∏ text=True –º–æ–∂–µ—Ç –ø–æ–º–æ—á—å –ø—Ä–∏ –æ—Ç–ª–∞–¥–∫–µ,
        # –Ω–æ –¥–ª—è –ø—Ä–æ—Å—Ç–æ–≥–æ –ø—Ä–æ–±—Ä–æ—Å–∞ –≤—ã–≤–æ–¥–∞ –¥–æ—á–µ—Ä–Ω–µ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –≤ –∫–æ–Ω—Å–æ–ª—å –ª—É—á—à–µ –æ—Å—Ç–∞–≤–∏—Ç—å –∫–∞–∫ –µ—Å—Ç—å
        # result = subprocess.run(command_list, check=False, capture_output=True, text=True)
        result = subprocess.run(command_list, check=False) # check=False –ø–æ–∑–≤–æ–ª—è–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∫–æ–¥ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤—Ä—É—á–Ω—É—é
        if result.returncode == 0:
            print(f"‚úÖ  –£—Å–ø–µ—à–Ω–æ: {description}")
        elif result.returncode == 130: # –ö–æ–¥ 130 –æ–±—ã—á–Ω–æ –æ–∑–Ω–∞—á–∞–µ—Ç –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏–µ –ø–æ Ctrl+C
            print(f"üî∂  –ü—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º: {description}")
        else:
            print(f"‚ùå  –û—à–∏–±–∫–∞ (–∫–æ–¥ {result.returncode}): {description}")
        return result.returncode
    except FileNotFoundError:
        print(f"‚ùå  –û—à–∏–±–∫–∞: –ö–æ–º–∞–Ω–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ Python –¥–æ—Å—Ç—É–ø–µ–Ω –∏ —Å–∫—Ä–∏–ø—Ç '{command_list[1]}' —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")
        return -1 # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–æ–¥ –æ—à–∏–±–∫–∏
    except Exception as e:
        print(f"‚ùå  –ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ '{description}': {e}")
        import traceback
        traceback.print_exc() # –î–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –æ—à–∏–±–∫–µ
        return -1 # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–æ–¥ –æ—à–∏–±–∫–∏


def select_timeframes_interactive(prompt_message="–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞–π–º—Ñ—Ä–µ–π–º—ã"):
    print_header(prompt_message)
    print("–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–∞–π–º—Ñ—Ä–µ–π–º—ã:", ", ".join(CORE_TIMEFRAMES_LIST))
    while True:
        selected_tfs_str = input(
            f"–í–≤–µ–¥–∏—Ç–µ —Ç–∞–π–º—Ñ—Ä–µ–π–º—ã —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª (–Ω–∞–ø—Ä–∏–º–µ—Ä, 15m 1h),\n'all' –¥–ª—è –≤—Å–µ—Ö, –∏–ª–∏ 'q' –¥–ª—è –æ—Ç–º–µ–Ω—ã: ").strip()
        if selected_tfs_str.lower() == 'q':
            return None
        if not selected_tfs_str or selected_tfs_str.lower() == 'all':
            return CORE_TIMEFRAMES_LIST

        selected_tfs = []
        invalid_tfs = []
        for tf_input in selected_tfs_str.split():
            if tf_input in CORE_TIMEFRAMES_LIST:
                selected_tfs.append(tf_input)
            else:
                invalid_tfs.append(tf_input)

        if invalid_tfs:
            print(f"–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ —Ç–∞–π–º—Ñ—Ä–µ–π–º—ã ({', '.join(invalid_tfs)}) –±—É–¥—É—Ç –ø—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω—ã.")

        if not selected_tfs:
            print("–ù–µ –≤—ã–±—Ä–∞–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
            continue
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ TF –¥–ª—è –ø—Ä–µ–¥—Å–∫–∞–∑—É–µ–º–æ–≥–æ –ø–æ—Ä—è–¥–∫–∞
        selected_tfs.sort(key=lambda x: CORE_TIMEFRAMES_LIST.index(x))
        print(f"–í—ã–±—Ä–∞–Ω—ã —Ç–∞–π–º—Ñ—Ä–µ–π–º—ã: {', '.join(selected_tfs)}")
        return selected_tfs


def clear_training_artifacts_interactive():
    print_header("–û—á–∏—Å—Ç–∫–∞ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤ –æ–±—É—á–µ–Ω–∏—è")
    confirm = input(
        "–í–ù–ò–ú–ê–ù–ò–ï! –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ —É–¥–∞–ª–∏—Ç:\n"
        f"  - –í—Å–µ —Ñ–∞–π–ª—ã –∏–∑ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ '{MODELS_DIR}/'\n"
        f"  - –í—Å–µ —Ñ–∞–π–ª—ã –∏–∑ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ '{LOGS_DIR}/'\n"
        f"  - –§–∞–π–ª—ã 'features_*.pkl' –∏ 'sample_*.csv' –∏–∑ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ '{DATA_FEATURES_DIR}/'\n"
        f"–ü–∞–ø–∫–∞ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö '{DATABASE_DIR}/' –∏ —Ñ–∞–π–ª '{UPDATE_LOG_FILE}' –ù–ï –±—É–¥—É—Ç –∑–∞—Ç—Ä–æ–Ω—É—Ç—ã.\n"
        "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å? (y/n): "
    ).lower()

    if confirm == 'y':
        print("\nüßπ  –ù–∞—á–∏–Ω–∞–µ–º –æ—á–∏—Å—Ç–∫—É...")

        for dir_to_clear, description in [(MODELS_DIR, "–º–æ–¥–µ–ª–µ–π"), (LOGS_DIR, "–ª–æ–≥–æ–≤")]:
            if os.path.exists(dir_to_clear):
                try:
                    # –£–¥–∞–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
                    for item in os.listdir(dir_to_clear):
                        item_path = os.path.join(dir_to_clear, item)
                        if os.path.isfile(item_path):
                            os.remove(item_path)
                        elif os.path.isdir(item_path):
                            shutil.rmtree(item_path)
                    print(f"    –°–æ–¥–µ—Ä–∂–∏–º–æ–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ {description} '{dir_to_clear}' –æ—á–∏—â–µ–Ω–æ.")
                except Exception as e:
                    print(f"    –ù–µ —É–¥–∞–ª–æ—Å—å –æ—á–∏—Å—Ç–∏—Ç—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ {dir_to_clear}: {e}")
            else:
                print(f"    –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è {dir_to_clear} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ (–ø—Ä–æ–ø—É—â–µ–Ω–æ).")
            # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ø–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ (–µ—Å–ª–∏ –æ–Ω–∞ –±—ã–ª–∞ –ø—É—Å—Ç–æ–π –∏–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–ª–∞)
            os.makedirs(dir_to_clear, exist_ok=True)

        if os.path.exists(DATA_FEATURES_DIR):
            cleaned_feature_files = 0
            try:
                for item in os.listdir(DATA_FEATURES_DIR):
                    item_path = os.path.join(DATA_FEATURES_DIR, item)
                    if os.path.isfile(item_path):
                        if (item.startswith("features_") and item.endswith(".pkl")) or \
                                (item.startswith("sample_") and item.endswith(".csv")):
                            try:
                                os.remove(item_path)
                                # print(f"    –£–¥–∞–ª–µ–Ω —Ñ–∞–π–ª: {item_path}") # –ú–æ–∂–Ω–æ —Ä–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –ª–æ–≥–∞
                                cleaned_feature_files += 1
                            except Exception as e:
                                print(f"    –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Ñ–∞–π–ª {item_path}: {e}")
            except Exception as e:
                 print(f"    –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ {DATA_FEATURES_DIR}: {e}")

            if cleaned_feature_files > 0:
                print(f"    –£–¥–∞–ª–µ–Ω–æ {cleaned_feature_files} —Ñ–∞–π–ª–æ–≤ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤/—Å—ç–º–ø–ª–æ–≤ –∏–∑ '{DATA_FEATURES_DIR}'.")
            else:
                print(f"    –§–∞–π–ª—ã –ø—Ä–∏–∑–Ω–∞–∫–æ–≤/—Å—ç–º–ø–ª–æ–≤ –≤ '{DATA_FEATURES_DIR}' –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –∏–ª–∏ —É–∂–µ –æ—á–∏—â–µ–Ω—ã.")
        else:
            print(f"    –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è {DATA_FEATURES_DIR} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –ø—Ä–æ–ø—É—Å–∫ —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤/—Å—ç–º–ø–ª–æ–≤.")

        print("‚úÖ  –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")
    else:
        print("–û—á–∏—Å—Ç–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.")


def ensure_base_directories():
    """–°–æ–∑–¥–∞–µ—Ç –±–∞–∑–æ–≤—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏, –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç."""
    print("–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ —Å–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑–æ–≤—ã—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π...")
    for dir_path in [DATABASE_DIR, DATA_FEATURES_DIR, MODELS_DIR, LOGS_DIR]:
        if not os.path.exists(dir_path):
            os.makedirs(dir_path)
            print(f"  –°–æ–∑–¥–∞–Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {dir_path}")
        # else: # –ú–æ–∂–Ω–æ –∑–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å, —á—Ç–æ–±—ã –Ω–µ –≤—ã–≤–æ–¥–∏—Ç—å –¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ø–∞–ø–æ–∫
        #     print(f"  –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {dir_path}")
    print("–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")

# --- –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ---
def main_menu():
    ensure_base_directories()

    while True:
        print_header("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
        print("--- üì¶ –°–±–æ—Ä –∏ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –î–∞–Ω–Ω—ã—Ö ---")
        print("  1. –ü–æ–ª–Ω–∞—è (–≥–ª—É–±–æ–∫–∞—è) –∑–∞–≥—Ä—É–∑–∫–∞ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö (old_update)")
        print("  2. –ò–Ω–∫—Ä–µ–º–µ–Ω—Ç–∞–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–≤–µ–∂–∏—Ö –¥–∞–Ω–Ω—ã—Ö (mini_update)")
        print("--- ‚öôÔ∏è  –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏ –û–±—É—á–µ–Ω–∏–µ –ú–æ–¥–µ–ª–µ–π ---")
        print("  3. –ü–æ—Å—Ç—Ä–æ–∏—Ç—å –ø—Ä–∏–∑–Ω–∞–∫–∏ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Ç–∞–π–º—Ñ—Ä–µ–π–º–æ–≤ (preprocess_features)")
        print("  4. –û–±—É—á–∏—Ç—å –º–æ–¥–µ–ª–∏ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Ç–∞–π–º—Ñ—Ä–µ–π–º–æ–≤ (train_model)")
        print("--- üöÄ –ü–∞–π–ø–ª–∞–π–Ω—ã (–ö–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏) ---")
        print("  5. –ü–∞–π–ø–ª–∞–π–Ω: –ú–∏–Ω–∏-–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ -> –ü—Ä–∏–∑–Ω–∞–∫–∏ -> –û–±—É—á–µ–Ω–∏–µ (–¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö TF)")
        print("  6. –ü–∞–π–ø–ª–∞–π–Ω: –ü–æ–ª–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ -> –ü—Ä–∏–∑–Ω–∞–∫–∏ -> –û–±—É—á–µ–Ω–∏–µ (–¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö TF)")
        print("  7. –ü–û–õ–ù–´–ô –ü–ï–†–ï–°–ë–û–†: –û—á–∏—Å—Ç–∫–∞ -> –ü–æ–ª–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ -> –ü—Ä–∏–∑–Ω–∞–∫–∏ -> –û–±—É—á–µ–Ω–∏–µ")
        print("--- üìä –ü—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –ê–Ω–∞–ª–∏–∑ ---")
        print("  8. –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–≥–Ω–æ–∑—ã –∏ —Ç–æ—Ä–≥–æ–≤—ã–π –ø–ª–∞–Ω (predict_all --save)")
        print("  9. –ó–∞–ø—É—Å—Ç–∏—Ç—å –±—ç–∫—Ç–µ—Å—Ç –¥–ª—è –æ–¥–Ω–æ–≥–æ —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞ (predict_backtest)")
        print("--- üõ†Ô∏è  –£—Ç–∏–ª–∏—Ç—ã ---")
        print(" 10. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å GPU –¥–ª—è CatBoost (gpu_test)")
        print(" 11. –û–ß–ò–°–¢–ò–¢–¨ –≤—Å–µ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç—ã –æ–±—É—á–µ–Ω–∏—è (–º–æ–¥–µ–ª–∏, –ª–æ–≥–∏, features)")
        print("  0. –í—ã—Ö–æ–¥")

        choice = input("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –æ–ø—Ü–∏–∏: ").strip()

        try:
            if choice == '1':
                # –ü–æ–ª–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö - –æ–±—ã—á–Ω–æ –±–µ–∑ —Ñ–∏–ª—å—Ç—Ä–æ–≤ –ø–æ —Å–∏–º–≤–æ–ª–∞–º
                run_script([PYTHON_EXECUTABLE, "old_update_binance_data.py", "--all"], "–ü–æ–ª–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö")

            elif choice == '2':
                # –ò–Ω–∫—Ä–µ–º–µ–Ω—Ç–∞–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ - –º–æ–∂–µ—Ç –±—ã—Ç—å —Å —Ñ–∏–ª—å—Ç—Ä–∞–º–∏, –Ω–æ –≤ —ç—Ç–æ–º –º–µ–Ω—é –ø–æ–∫–∞ –±–µ–∑ –Ω–∏—Ö
                tfs = select_timeframes_interactive("–ò–Ω–∫—Ä–µ–º–µ–Ω—Ç–∞–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ")
                if tfs:
                     # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –±—ã–ª–æ –±—ã –¥–æ–±–∞–≤–∏—Ç—å –∑–∞–ø—Ä–æ—Å —Å–∏–º–≤–æ–ª–∞/–≥—Ä—É–ø–ø—ã, –Ω–æ –æ—Å—Ç–∞–≤–∏–º –ø–æ–∫–∞ –∫–∞–∫ –≤ –æ—Ä–∏–≥–∏–Ω–∞–ª–µ
                     run_script([PYTHON_EXECUTABLE, "mini_update_binance_data.py", "--tf"] + tfs,
                               f"–ò–Ω–∫—Ä–µ–º–µ–Ω—Ç–∞–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–ª—è {', '.join(tfs)}")

            elif choice == '3':
                tfs = select_timeframes_interactive("–ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤")
                if tfs:
                    # >>> –ò–ó–ú–ï–ù–ï–ù–û —Å–æ–≥–ª–∞—Å–Ω–æ –ø–∞—Ç—á—É
                    group_or_symbol = input(
                        f"–í–≤–µ–¥–∏—Ç–µ –≥—Ä—É–ø–ø—É ({'/'.join(SYMBOL_GROUPS)}) –∏–ª–∏ —Å–∏–º–≤–æ–ª (–Ω–∞–ø—Ä–∏–º–µ—Ä: BTCUSDT),\n"
                        "–∏–ª–∏ –æ—Å—Ç–∞–≤—å—Ç–µ –ø—É—Å—Ç—ã–º –¥–ª—è –≤—Å–µ—Ö: "
                    ).strip()
                    group_args = [] # –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–æ –≤ group_args –¥–ª—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –ø–∞—Ç—á—É, —Ö–æ—Ç—è –º–æ–∂–µ—Ç –±—ã—Ç—å –∏ symbol
                    description_suffix = "–¥–ª—è –≤—Å–µ—Ö"
                    if group_or_symbol:
                        if group_or_symbol.lower() in SYMBOL_GROUPS:
                            group_args = ["--symbol-group", group_or_symbol.lower()]
                            description_suffix = f"–¥–ª—è –≥—Ä—É–ø–ø—ã {group_or_symbol.lower()}"
                        else:
                            group_args = ["--symbol", group_or_symbol.upper()]
                            description_suffix = f"–¥–ª—è —Å–∏–º–≤–æ–ª–∞ {group_or_symbol.upper()}"

                    for tf_item in tfs:
                        desc = f"–ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ {description_suffix} ({tf_item})"
                        print(f"\n--- {desc} ---")
                        if run_script([PYTHON_EXECUTABLE, "preprocess_features.py", "--tf", tf_item] + group_args, desc) != 0:
                            print(f"{desc} –ø—Ä–µ—Ä–≤–∞–Ω–æ –∏–ª–∏ –∑–∞–≤–µ—Ä—à–∏–ª–æ—Å—å —Å –æ—à–∏–±–∫–æ–π. –ü—Ä–æ–ø—É—Å–∫ –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Ç–∞–π–º—Ñ—Ä–µ–π–º–æ–≤.")
                            break # –ü—Ä–µ—Ä—ã–≤–∞–µ–º —Ü–∏–∫–ª –ø–æ —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞–º

            elif choice == '4':
                tfs = select_timeframes_interactive("–û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–µ–π")
                if tfs:
                    # >>> –ò–ó–ú–ï–ù–ï–ù–û —Å–æ–≥–ª–∞—Å–Ω–æ –ø–∞—Ç—á—É
                    group_or_symbol = input(
                        f"–í–≤–µ–¥–∏—Ç–µ –≥—Ä—É–ø–ø—É ({'/'.join(SYMBOL_GROUPS)}) –∏–ª–∏ —Å–∏–º–≤–æ–ª (–Ω–∞–ø—Ä–∏–º–µ—Ä: BTCUSDT),\n"
                        "–∏–ª–∏ –æ—Å—Ç–∞–≤—å—Ç–µ –ø—É—Å—Ç—ã–º –¥–ª—è –≤—Å–µ—Ö: "
                    ).strip()
                    symbol_arg = [] # –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–æ –≤ symbol_arg –¥–ª—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –ø–∞—Ç—á—É, —Ö–æ—Ç—è –º–æ–∂–µ—Ç –±—ã—Ç—å –∏ group
                    description_suffix = "–¥–ª—è –≤—Å–µ—Ö –ø–∞—Ä"
                    if group_or_symbol:
                         if group_or_symbol.lower() in SYMBOL_GROUPS:
                             symbol_arg = ["--symbol-group", group_or_symbol.lower()]
                             description_suffix = f"–¥–ª—è –≥—Ä—É–ø–ø—ã {group_or_symbol.lower()}"
                         else:
                             symbol_arg = ["--symbol", group_or_symbol.upper()]
                             description_suffix = f"–¥–ª—è —Å–∏–º–≤–æ–ª–∞ {group_or_symbol.upper()}"


                    for tf_item in tfs:
                        desc = f"–û–±—É—á–µ–Ω–∏–µ {description_suffix} ({tf_item})"
                        if run_script([PYTHON_EXECUTABLE, "train_model.py", "--tf", tf_item] + symbol_arg, desc) != 0:
                            print(f"{desc} –ø—Ä–µ—Ä–≤–∞–Ω–æ –∏–ª–∏ –∑–∞–≤–µ—Ä—à–∏–ª–æ—Å—å —Å –æ—à–∏–±–∫–æ–π. –ü—Ä–æ–ø—É—Å–∫ –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Ç–∞–π–º—Ñ—Ä–µ–π–º–æ–≤.")
                            break # –ü—Ä–µ—Ä—ã–≤–∞–µ–º —Ü–∏–∫–ª –ø–æ —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞–º


            elif choice == '5':
                tfs = select_timeframes_interactive("–ü–∞–π–ø–ª–∞–π–Ω: –ú–∏–Ω–∏-–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ -> –ü—Ä–∏–∑–Ω–∞–∫–∏ -> –û–±—É—á–µ–Ω–∏–µ")
                if tfs:
                     # –ü–∞–π–ø–ª–∞–π–Ω—ã –ø–æ–∫–∞ –±–µ–∑ —Ñ–∏–ª—å—Ç—Ä–æ–≤ –ø–æ —Å–∏–º–≤–æ–ª–∞–º –≤ —ç—Ç–æ–º –º–µ–Ω—é, –Ω–æ train_model –∏ preprocess_features
                     # –≤–Ω—É—Ç—Ä–∏ –ø–∞–π–ø–ª–∞–π–Ω–∞ –º–æ–≥–ª–∏ –±—ã –∏—Ö –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å, –µ—Å–ª–∏ –±—ã –ø–∞–π–ø–ª–∞–π–Ω –∏—Ö –ø—Ä–∏–Ω–∏–º–∞–ª.
                     # –¢–µ–∫—É—â–∏–π pipeline.py –∏—Ö –Ω–µ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç, –æ—Å—Ç–∞–≤–ª—è–µ–º –∫–∞–∫ –µ—Å—Ç—å.
                     run_script([PYTHON_EXECUTABLE, "pipeline.py", "--train", "--skip-predict", "--tf"] + tfs,
                               "–ü–∞–π–ø–ª–∞–π–Ω (–º–∏–Ω–∏-–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ, –ø—Ä–∏–∑–Ω–∞–∫–∏, –æ–±—É—á–µ–Ω–∏–µ)")
            elif choice == '6':
                tfs = select_timeframes_interactive("–ü–∞–π–ø–ª–∞–π–Ω: –ü–æ–ª–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ -> –ü—Ä–∏–∑–Ω–∞–∫–∏ -> –û–±—É—á–µ–Ω–∏–µ")
                if tfs:
                     # –ü–∞–π–ø–ª–∞–π–Ω—ã –ø–æ–∫–∞ –±–µ–∑ —Ñ–∏–ª—å—Ç—Ä–æ–≤ –ø–æ —Å–∏–º–≤–æ–ª–∞–º
                    run_script(
                        [PYTHON_EXECUTABLE, "pipeline.py", "--full-update", "--train", "--skip-predict", "--tf"] + tfs,
                        "–ü–∞–π–ø–ª–∞–π–Ω (–ø–æ–ª–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ, –ø—Ä–∏–∑–Ω–∞–∫–∏, –æ–±—É—á–µ–Ω–∏–µ)")

            elif choice == '7':
                tfs = select_timeframes_interactive(
                    "–ü–û–õ–ù–´–ô –ü–ï–†–ï–°–ë–û–†: –û—á–∏—Å—Ç–∫–∞ -> –ü–æ–ª–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ -> –ü—Ä–∏–∑–Ω–∞–∫–∏ -> –û–±—É—á–µ–Ω–∏–µ")
                if tfs:
                    print_header("–ù–∞—á–∞–ª–æ –ü–û–õ–ù–û–ì–û –ü–ï–†–ï–°–ë–û–†–ê")
                    # –û—á–∏—Å—Ç–∫–∞
                    clear_training_artifacts_interactive()
                    # –ü–æ–ª–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏ –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ (—á–µ—Ä–µ–∑ pipeline)
                    # –ü–∞–π–ø–ª–∞–π–Ω predict_all.py –Ω–µ –∑–∞–ø—É—Å–∫–∞–µ—Ç, —Ç–æ–ª—å–∫–æ preprocess –∏ train (–µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω–æ)
                    # –ü–∞–π–ø–ª–∞–π–Ω train_model –º–æ–∂–µ—Ç –ø—Ä–∏–Ω–∏–º–∞—Ç—å --symbol/--symbol-group, –Ω–æ —Ç–µ–∫—É—â–∏–π pipeline.py –Ω–µ –ø–µ—Ä–µ–¥–∞–µ—Ç —ç—Ç–∏ —Ñ–ª–∞–≥–∏.
                    # –î–ª—è –ø–æ–ª–Ω–æ–≥–æ –ø–µ—Ä–µ—Å–±–æ—Ä–∞, –≤–µ—Ä–æ—è—Ç–Ω–æ, –º—ã –≤—Å–µ–≥–¥–∞ —Ö–æ—Ç–∏–º –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –í–°–ï —Å–∏–º–≤–æ–ª—ã, —Ç–∞–∫ —á—Ç–æ —Ñ–∏–ª—å—Ç—Ä –Ω–µ –Ω—É–∂–µ–Ω.
                    if run_script([PYTHON_EXECUTABLE, "pipeline.py", "--full-update", "--train", "--skip-predict", "--tf"] + tfs,
                                  "–≠—Ç–∞–ø 1/1 (–ü–æ–ª–Ω—ã–π –ø–µ—Ä–µ—Å–±–æ—Ä): –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ, –ü—Ä–∏–∑–Ω–∞–∫–∏, –û–±—É—á–µ–Ω–∏–µ") == 0:
                        print_header("–ü–û–õ–ù–´–ô –ü–ï–†–ï–°–ë–û–† –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ.")
                    else:
                         print("–ü–û–õ–ù–´–ô –ü–ï–†–ï–°–ë–û–† –ø—Ä–µ—Ä–≤–∞–Ω –Ω–∞ –æ–¥–Ω–æ–º –∏–∑ —ç—Ç–∞–ø–æ–≤.")

            elif choice == '8':

            print_header("–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–æ–≥–Ω–æ–∑–æ–≤")





                            +    group_or_symbol = input(

                                +        "–í–≤–µ–¥–∏—Ç–µ –≥—Ä—É–ø–ø—É (top8/meme/defi) –∏–ª–∏ —Å–∏–º–≤–æ–ª (–Ω–∞–ø—Ä–∏–º–µ—Ä: BTCUSDT),\n"


                                +).strip()

                            +    predict_args = ["--save"]

                            +
                            if group_or_symbol:

                            +
                            if group_or_symbol.lower() in SYMBOL_GROUPS:

                            +            predict_args += ["--symbol-group", group_or_symbol.lower()]

                            + else:

            +            predict_args += ["--symbol", group_or_symbol.upper()]

            run_script(

                + [PYTHON_EXECUTABLE, "predict_all.py"] + predict_args,

                +        f"–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–æ–≥–Ω–æ–∑–æ–≤ –¥–ª—è {group_or_symbol or '–≤—Å–µ—Ö –ø–∞—Ä'}"

            )

            elif choice == '9':
                print_header("–ó–∞–ø—É—Å–∫ –±—ç–∫—Ç–µ—Å—Ç–∞")
                print("–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–∞–π–º—Ñ—Ä–µ–π–º—ã:", ", ".join(CORE_TIMEFRAMES_LIST))
                tf_backtest = input(f"–í–≤–µ–¥–∏—Ç–µ —Ç–∞–π–º—Ñ—Ä–µ–π–º –¥–ª—è –±—ç–∫—Ç–µ—Å—Ç–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 15m) –∏–ª–∏ 'q' –¥–ª—è –æ—Ç–º–µ–Ω—ã: ").strip()
                if tf_backtest.lower() == 'q':
                    continue
                if tf_backtest in CORE_TIMEFRAMES_LIST:
                     # –ë—ç–∫—Ç–µ—Å—Ç predict_backtest.py –º–æ–∂–µ—Ç –ø—Ä–∏–Ω–∏–º–∞—Ç—å --symbol/--symbol-group
                     # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∑–∞–ø—Ä–æ—Å –∑–¥–µ—Å—å, –µ—Å–ª–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è –±—ç–∫—Ç–µ—Å—Ç–∞.
                     # –û—Å—Ç–∞–≤–ª—è–µ–º –ø–æ–∫–∞ –±–µ–∑ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –∫–∞–∫ –≤ –æ—Ä–∏–≥–∏–Ω–∞–ª–µ.
                    run_script([PYTHON_EXECUTABLE, "predict_backtest.py", "--tf", tf_backtest],
                               f"–ë—ç–∫—Ç–µ—Å—Ç –¥–ª—è {tf_backtest}")
                else:
                    print(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ç–∞–π–º—Ñ—Ä–µ–π–º: {tf_backtest}")

            elif choice == '10':
                run_script([PYTHON_EXECUTABLE, "gpu_test.py"], "–ü—Ä–æ–≤–µ—Ä–∫–∞ GPU")

            elif choice == '11':
                clear_training_artifacts_interactive()

            elif choice == '0':
                print("–í—ã—Ö–æ–¥ –∏–∑ –ø—Ä–æ–≥—Ä–∞–º–º—ã.")
                sys.exit(0)

            else:
                print("–ù–µ–≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä –∏–∑ –º–µ–Ω—é.")

        except KeyboardInterrupt:
            print("\n–û–ø–µ—Ä–∞—Ü–∏—è –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º (Ctrl+C –≤ –º–µ–Ω—é). –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.")
            # –î–æ—á–µ—Ä–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å—ã, –∑–∞–ø—É—â–µ–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ subprocess.run, –¥–æ–ª–∂–Ω—ã –ø–æ–ª—É—á–∏—Ç—å —Å–∏–≥–Ω–∞–ª –∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∑–∞–≤–µ—Ä—à–∏—Ç—å—Å—è
            # –ù–æ –µ—Å–ª–∏ –æ–Ω–∏ –∑–∞–≤–∏—Å–Ω—É—Ç, –º–æ–∂–µ—Ç –ø–æ—Ç—Ä–µ–±–æ–≤–∞—Ç—å—Å—è —Ä—É—á–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ.
            continue
        except Exception as e:
            print(f"\n–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ main_cli: {e}")
            import traceback
            traceback.print_exc()
            # –ú–æ–∂–Ω–æ –Ω–µ –≤—ã—Ö–æ–¥–∏—Ç—å, –∞ –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é, –µ—Å–ª–∏ –æ—à–∏–±–∫–∞ –Ω–µ —Ñ–∞—Ç–∞–ª—å–Ω–∞
            # sys.exit(1)
            continue # –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é –ø–æ—Å–ª–µ –æ—à–∏–±–∫–∏


if __name__ == "__main__":
    try:
        main_menu()
    except KeyboardInterrupt:
        print("\n–ü—Ä–æ–≥—Ä–∞–º–º–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º (Ctrl+C).")
        sys.exit(0)
    except Exception as e:
        print(f"\n–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤–Ω–µ –º–µ–Ω—é: {e}")
        import traceback
        traceback.print_exc()
        sys.exit(1)